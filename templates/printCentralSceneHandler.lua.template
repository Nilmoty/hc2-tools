--[[
%% properties
%% events
{{.DeviceID}} CentralSceneEvent
%% globals
--]] 

--[[
-----------------------------------------------------------------------------
-- CentralSceneEventHandler -- Office Central Scene Controler
-----------------------------------------------------------------------------
Copyright (c) 2020 Theofanis Vassiliou-Gioles. All Rights Reserved.
Version 0.1


-- VERSION HISTORY ----------------------------------------------------------
0.1   - template code generated by hc2Tool.

-- FILE DESCRIPTION --------------------------------------------------------
This files handles the CentralSceneEvents triggered by {{.Device}}
In addition a companion VD named {{.VDname}} is available to emulate the triggering

-- LIST OF GLOBAL VARIABLES NEEDED ------------------------------------------

NONE

--]] -- What should be the default action if script is started manually
-- Using this default behaviour from other scripts
-- Don't change permanently
local defaultKeyID = 1;
local defautlKeyAttribute = 'Pressed';

dbgLvl = 2;

local jT = json.decode(fibaro:getGlobalValue("HomeTable"));

-- require('library/Debug');
-- require('library/LightsLib');

-- SOME LOCAL VARIABLES -----------------------------------------------------

-- Required by the boilerplate part
local startSource = fibaro:getSourceTrigger();
local stopped = false;
local doPostamble = true;

--- MAIN CODE PART ------------------------------------------------------------------------

if (fibaro:countScenes() > 1) then fibaro:abort(); end

local startSource = fibaro:getSourceTrigger()

function readKeyAndAttribute(source)
    local keyId, keyAttribute

    if (source == nil) then
        source = {}
        source.type = "other"
    end

    if (source.type == "event" and source.event.type == "CentralSceneEvent") then
        -- keyAttribute will have one of
        -- Pressed. Pressed2, Pressed3, Pressed4, Pressed5,  HeldDown, Released
        local button_source = source["event"]["data"]
        keyId = button_source["keyId"]
        keyAttribute = button_source["keyAttribute"]
    elseif (source.type == "other") then
        Debug("green", "Other event type happend. Checking for args")
        local args = fibaro:args()
        if (args ~= nil) then
            Debug("green", "Have args ...")
            return args[1], args[2]
        end
        Debug("green", "Didn't have args. Using defaults.")
        return defaultKeyID, defautlKeyAttribute

    elseif (source.type == "event") then
        Debug("red",
              "A non-CentralSceneEvent detected. Please handle if necessary. Aborting")
        Debug("red", json.encode(source))
        return
    else
        Debug("red", "Detect unexpected event. Aborting")
        return
    end
    return keyId, keyAttribute
end

local keyId, keyAttribute = readKeyAndAttribute(startSource)
if (keyId == nil) then return end
Debug("green",
      "START - ##fileName### scene - (c) 2020 Theofanis Vassiliou-Gioles");

Debug("blue", "Key Pressed: (" .. keyId .. ", " .. keyAttribute .. ")")

Unused = function() Debug('blue', 'Function not yet defined'); end

-- Is called after the key pressed is executed and finished
-- normally
function endScene()
    if (doPostamble) then
        -- Enter some postamble code here;
    end

    Debug("green", "STOP - ##fileName### scene ");
    fibaro:abort();
end

-- Anzahl der KeyIds
local c_tbl = { 
    {{range .}} { }, {{end}} 
    }

-- Configure here the array
{{range .}}

c_tbl[{{.KeyId}}] =
{
{{range .KeyAttribute}}
    ['{{.}}'] = Unused,
{{end}}

}    

-- For a single arg we call
fibaro:startScene(188, {1, "Pressed"})
