{"id":146,"name":"VSLSchlafzimmer","type":"com.fibaro.luaScene","categories":["other"],"roomID":5,"iconID":1005,"runConfig":"TRIGGER_AND_MANUAL","alexaProhibited":true,"autostart":false,"protectedByPIN":false,"killable":true,"killOtherInstances":false,"maxRunningInstances":2,"runningInstances":0,"instances":[],"runningManualInstances":0,"visible":true,"isLua":true,"properties":"","triggers":{"properties":[{"id":542,"name":"value"},{"id":544,"name":"value"}],"globals":["SleepState","SleepSchlafzimmer","PresentState","TimeOfDay","Darkness"],"events":[],"weather":[]},"actions":{"devices":[],"scenes":[],"groups":[]},"sortOrder":227,"lua":"--[[\n%% properties\n542 value\n544 value\n\n%% globals\nSleepState\nSleepSchlafzimmer\nPresentState\nTimeOfDay\nDarkness\n\n--]]\n\n--[[\n-----------------------------------------------------------------------------\n-- VERY SMART LIGHT SCENE -- Schlafzimmer\n-----------------------------------------------------------------------------\nCopyright (c) 2016 Zoran Sankovic - Sankotronic. All Rights Reserved.\nVersion 1.4.0\n\n-- VERSION HISTORY ----------------------------------------------------------\n1.4.0 - Darkness is not used anymore for turning On lights and dim low levels.\n        Only TimeOfDay is now used for that purpose. Added support for \n        different types of Philips HUE light VD. Scene now supports HUE\n        color ambience, HUE white ambience and HUE white dimmable only bulbs\n        and VDs. Also added support for customized HUE VD. Support for HUE\n        plugin remain same. It is possible to mix different types of HUE VD\n        since now you have to define VD type for each HUE light. Added two\n        new global variables for Cooking and for Mealtime that can be used\n        to define different brightness levels and to keep lights On as long\n        as this variables are set to Yes. Corrected dimming of RGBW lights\n        when useRGBWcolor is set to Yes. Corrected duration timer compensation\n        with PIRwindowTime. Now is properly calculated and warning displayed\n        if duration setting is lower than PIRwindowTime. Now lights will \n        always turn on for the duration of motion sensor breach time. Corrected\n        scene behaviour when PresentState and SleepState are changed. When\n        PresentState is changed to Home or Holiday scene will turn on lights\n        when motion is detected or dim low if set for that part of day. Same\n        is when SleepState change from Sleep to Awake. When PresentState is \n        set to Holiday scene can be controlled by global variable triggers\n1.3.5 - corrected that scene turn off switch lights if user set valSWT to 0.\n        corrected that scene turn off RGBW lights if program iz running or\n        color is enabled if dimRGB is set to 0. Added ProjectorState global\n        variable that can be used to additionally setup lighting for movie\n        time with projector. So now you can have two different setup to watch\n        movies! Don't forget to put CinemaState and ProjectorState to \n        extraGlobalName to keep lights at predefined values!\n1.3.4 - resolved bug for keepDimSleep setting that logic was reversed. Now if\n        set to true will keep lights dimmed and false will turn them off.\n        Rectified situation when scene not turning lights on at all if is not\n        using light sensors. Corrected dimOff logic to properly dim or turn\n        off lights depending on settings. Cleaned code of some other bugs \n        found during testing.\n1.3.3 - resolved bug that was preventing extra timer using jompa68 Alarm\n        clock from proper functioning. Extended dimOff function so now lights\n        can be dimmed low during all day and also all night regardless of\n        SleepState value depending on your settings. Corrected scene behavior\n        when sleepName and PresentState global variables value changes and \n        debugging messages\n1.3.2 - Added support for latest version of jompa68 Alarm clock 3.0.0.\n        Added possibility to define two different dimming levels for Evening\n        and Night time if there is no movement in room and lights are set to\n        dim instead switch off. Corrected bug for turning on RGBW lights if \n        program and color set to No. Added some basic checking of user\n        settings if HolidayLights flag, Brightness and dimOff values are\n        missing. Corrected how scene handles ambilight settings. dim and off\n        ambilight changed to one setting dimOffAmbilight and it must be set\n        to Yes to use settings. keepAmbilight is just setting if you want to\n        keep color when motion detected or use defalut colors. Even if you\n        do not keep colors while in room they will still revert to color\n        when no movement detected.\n1.3.1 - corrected usage of dimAmbilight and offAmbilight so that only color\n        and saturation is remembered while brightness is set by scene setting\n        corrected Alarm clock timer to check if it is turned Off to not keep\n        lights on.\n1.3   - added ambilight selection so that scene remembers previous status of\n        the HUE lamps to dim back when no motion in the room, or even\n        leave settings after turning them off. It is also possible to select\n        if HUE lamps will raise brightness in ambilight colors or to default\n        settings when there is motion in the room. Now every lamp can be set\n        to different light level for every used situation like (hoilday lights,\n        guests, cinema, etc.) and for every part of the day.\n1.2   - added possibility for scene to be triggered by global variables. That\n        makes possible to use motion sensors from other systems to control\n        this scene through mirroring motion sensors to HC as global variables\n1.1   - added support for HUE plugins, added extra timer to turn on devices,\n        run scenes or change global variable after predefined time. RGBW module\n        programs can now be set differently for each day of the week. Added\n        holiday lights control and dim levels. Corrected extra timer which uses\n        alarm clock to keep lights correctly at defined time for that day\n1.0   - added support for RGBW modules with selection of program to run at\n        predefined time of day, extra timer to keep lights on for defined time\n0.7   - added extra devices to keep lights on if value is equal to defined\n        value. Also added possibility to use more than one montion and light\n        sensors.\n0.5   - added support for HUE VD and switch (relay) type light controllers\n0.1   - basic code able to control lights triggered by motion and light sensor\n\n-- COPYRIGHT NOTICE ---------------------------------------------------------\nRedistribution and use of this source code, with or without modification, \nis permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. The name of the author may not be used to endorse or promote products \n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY  COPYRIGHT OWNER  \"AS IS\"  AND ANY  EXPRESS  OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF \nMERCHANTABILITY  AND FITNESS FOR A  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\nEVENT  SHALL THE AUTHOR  BE  LIABLE  FOR ANY  DIRECT,  INDIRECT, INCIDENTAL, \nSPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT LIMITED \nTO, PROCUREMENT  OF SUBSTITUTE  GOODS OR  SERVICES;  LOSS OF USE,  DATA,  OR \nPROFITS;  OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED  AND  ON  ANY THEORY OF \nLIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR  TORT  (INCLUDING \nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n-- SCENE DESCRIPTION --------------------------------------------------------\nFully configurable scene to control your lights for HC2! Before usage need to\nprepare sensors, lights and other devices ID, configure following global \nvariables or check if you already have ones with the same behavior. Since it\nis possible to map values for all predefined global variables you can use \nvalues in your language and just map corresponding values.\n-- LIST OF GLOBAL VARIABLES NEEDED ------------------------------------------\n\"HomeTable\"       - predefined global variable table with device and scene IDs.\n                    Recommended to use since z-wave devices can change their\n                    ID with re-inclusion and then is necessary to edit only \n                    scene which make this table and only device ID in scene\n                    headers. Much less time and effort is needed than without\n                    that option!\n\"Darkness\"        - global variable, possible values: \n                    0 - Day time, 1 - Night time\n\"TimeOfDay\"       - predefined global variable with values: \n                    \"Morning\", \"Day\", \"Evening\", \"Night\"\n\"PresentState\"    - predefined global variable with values:\n                    \"Home\", \"Away\", \"Holiday\"\n\"SleepState\"      - predefined global variable with values: \n                    \"Awake\", \"Sleep\"\n\"LightState\"      - predefined global variable with values \"Auto\", \"Manual\"\n\"IndoorLightsDim\" - predefined global variable with values \"Yes\", \"No\"\n\"CinemaState\"     - predefined global variable with values \"Yes\", \"No\"\n\"ProjectorState\"  - predefined global variable with values \"Yes\", \"No\"\n\"CookingState\"    - predefined global variable with values \"Yes\", \"No\"\n\"MealState\"       - predefined global variable with values \"Yes\", \"No\"\n\"GuestState\"      - predefined global variable with values \"Yes\", \"No\"\n\"SleepXxxxxxx\"    - predefined global variables with values \"Yes\", \"No\", can\n                    have different name for different bedrooms, just replace\n                    Xxxxxxx with name of the bedroom eg.sleepMaster, sleepRoom1\n                    etc. All you need is to define this global variable, \n                    import VD that will change state and then put name of this\n                    variable bellow in code line 157 for local variable\n                    sleepingName\n\"HolidayLights\"   - predefined global variable with values \"On\", \"Off\" used\n                    to change brightness level of controlled lights to more\n                    festive level and with ability to temporarily disable\n                    control of some lights with this scene\nThe beauty of this scene is that you don't have to declare new globals if you\nalready have them, all you have to do is to enter name of your corresponding\nglobal variable and map your values to the ones used by this scene to get it\nwork properly! For details how to setup this scene please refer to comments\nprovided bellow.\n--]]\n\n-- Making sure that only one instance of the scene is running. This is working\n-- in 99,99% of the time with Max. running instances set to 4 or more. There are\n-- very rare occasions when in very small split of second one instance still\n-- didn't stop but another already kick in and then giving warning notification\n-- if Max. running instances is set to 2 or less.\n-- There is no other influence to this scene except that annoying warnings in\n-- notification area but scene will continue to work properly. Of course you need\n-- to leave this code bellow as it is.\nif (fibaro:countScenes() > 1) then\n  fibaro:abort();\nend\n    \n-- PART OF CODE FOR USERS TO EDIT AND SETUP ---------------------------------\n\n-- GLOBAL VARIABLES ---------------------------------------------------------\n-- enter names and value mapping of your global variables or leave as it is\n-- and add to variables panel\n-- get the table of device & scene ID's from global variable HomeTable. If\n-- then uncomment bellow line else leave it as it is!\n-- local jT = json.decode(fibaro:getGlobalValue(\"HomeTable\"));\n\n-- \"PresentState\" is predefined global value that determines if you are at home\n-- away or on holidays. This variable value is set by other scene or VD. \n-- Enter name of your global variable between \"\" or leave as it is\nlocal presentState        = \"PresentState\";\n-- Enter corresponding values that you use for presence\nlocal presentStateMapping = {Home=\"Home\", Away=\"Away\", Holiday=\"Holiday\"};\n-- \"SleepState\" is predefined global variable that determines if you are\n-- sleeping or are awake. This variable value is set by other scene or VD.\nlocal sleepState          = \"SleepState\";\nlocal sleepStateMapping   = {Sleep=\"Sleep\", Awake=\"Awake\"};\n-- if you don't want to use SleepState then set following variable to \"No\"\n-- otherwise to \"Yes\". If set to \"No\" and not using sleepState then make \n-- sure that you put useTimeOfDay to \"Yes\"  otherwise lights will always \n-- turn to Awake level!!\nlocal useSleepState       = \"Yes\";\n-- \"sleepingName\" predefined global variable with possible values: \"Yes\",\n-- \"No\" but in comparison to \"SleepState\" which puts to sleep entire house\n-- or apartment this one is used to put to sleep only one room. So it can be\n-- used to turn living room into bedroom, or to disable lights in children \n-- rooms so they can go sleep earlier and we don't have to put entire house \n-- to sleep. If value is set to \"Yes\" disables smart light, \"No\" enables smart\n-- light. If you don't use it then just leave \"\" empty. In our children\n-- bedrooms I setup dimmer 2 switch 2 to start scene on 1 click which then\n-- press button on VD to change state of this variable from \"No\" to \"Yes\" and\n-- vice versa so they can switch off lighting themselves. When this variable\n-- value change from \"Yes\" to \"No\" this scene will turn off lights and will\n-- not turn on lights on movement. Put also this global variable under scene\n-- header section %% globals!\nlocal sleepingName        = \"SleepSchlafzimmer\";\nlocal sleepingMapping     = {Yes=\"Yes\", No=\"No\"};\n-- \"LightState\" is predefined global variable with possible values: \"Auto\",\n-- \"Manual\". If set to \"Auto\" then smart lights are enabled if set to \"Manual\"\n-- then lights have to be turned On/Off manually because all very smart light\n-- scenes are disabled! Value is changed with VD.\nlocal lightState          = \"LightState\";\nlocal lightStateMapping   = {Auto=\"Auto\", Manual=\"Manual\"};\n-- \"IndoorLightsDim\" is predefined global variable with possible values: \n-- \"Yes\", \"No\". If set to \"Yes\" then lights will be dimmed to Sleep level \n-- regardless of any other settings (Guest, Awake, Cinema), \"No\" will enable \n-- other dimming levels. We use this during summer to dim lights in house not\n-- to attract insects since windows and doors are opened. Value is changed\n-- with VD.\nlocal indoorLightsDim     = \"IndoorLightsDim\";\nlocal indoorLightsMapping = {Yes=\"Yes\", No=\"No\"}\n-- if you don't want to use indorLigtsDim then set following variable to \"No\"\n-- otherwise to \"Yes\"\nlocal useIndoorLights     = \"No\";\n-- \"CinemaState\" is predefined global variable with possible values: \"Yes\", \n-- \"No\". If set to \"Yes\" lights will dim to predefined levels by dimDIMCinema\n-- & dimVDCinema and status can be changed by VD that controls TV.\nlocal cinemaState         = \"CinemaState\";\nlocal cinemaStateMapping  = {Yes=\"Yes\", No=\"No\"};\n-- if you don't want to use cinemaState then set following variable to \"No\" \n-- otherwise to \"Yes\"\nlocal useCinemaState      = \"No\";\n-- \"ProjectorState\" is predefined global variable with possible values: \"Yes\", \n-- \"No\". If set to \"Yes\" lights will dim to predefined levels by dimDIMprojector\n-- & dimVDprojector and status can be changed by VD that controls projector\nlocal projectorState        = \"ProjectorState\";\nlocal projectorStateMapping = {Yes=\"Yes\", No=\"No\"};\n-- if you don't want to use cinemaState then set following variable to \"No\" \n-- otherwise to \"Yes\"\nlocal useProjectorState     = \"No\";\n-- \"CookingState\" is predefined global variable with possible values: \"Yes\", \n-- \"No\". If set to \"Yes\" lights will dim to predefined levels by dimDIMcooking\n-- & dimVDcooking and status can be changed by VD that controls cooking\nlocal cookingState        = \"CookingState\";\nlocal cookingStateMapping = {Yes=\"Yes\", No=\"No\"};\n-- if you don't want to use cookingState then set following variable to \"No\" \n-- otherwise to \"Yes\"\nlocal useCookingState     = \"No\";\n-- \"MealState\" is predefined global variable with possible values: \"Yes\", \n-- \"No\". If set to \"Yes\" lights will dim to predefined levels by dimDIMMeal\n-- & dimVDMeal and status can be changed by VD that controls mealtime\nlocal mealState           = \"MealState\";\nlocal mealStateMapping    = {Yes=\"Yes\", No=\"No\"};\n-- if you don't want to use mealState then set following variable to \"No\" \n-- otherwise to \"Yes\"\nlocal useMealState        = \"No\";\n-- GuestState is predefined global variable with possible values: \"Yes\", \"No\".\n-- If \"Yes\" it will set lights to predefined level with dimVDGuest & dimDIMGuest,\n-- also timer is disabled and lights will stay on until set to \"No\" guests\n-- if this global variable is added to to section bellow:\n-- GLOBAL VARIABLES STATE TO KEEP LIGHTS ON!\nlocal guestState          = \"GuestState\";\nlocal guestStateMapping   = {Yes=\"Yes\", No=\"No\"};\n-- if you don't want to use guestState then set following variable to \"No\"\n-- otherwise to \"Yes\"\nlocal useGuestState       = \"No\";\n-- \"Darkness\" is global variable with two possible states 0 - for day time\n-- and 1 for night time and it is changed at sunrise & sunset by main scene\n-- that is responsible for all time based events. IMPORTANT!! This one you\n-- also must add to scene header under %% globals section\nlocal darkness            = \"Darkness\";\nlocal darknessMapping     = {Light=\"0\", Dark=\"1\"};\n-- \"TimeOfDay\" is global variable with possible values: \"Morning\", \"Day\",\n-- \"Evening\", \"Night\". Value is changed by main scene that is responsible \n-- for all time based events. Lights will adapt brightness when variable\n-- change value if you set useTimeOfDay to \"Yes\". If you set to \"No\" and\n-- all other options (Holiday, Guest, Cinema, Indoor..) are se to \"No\"\n-- then only SleepState will influence lights dim level. This one you\n-- also must add to scene header under %% globals section\nlocal timeOfDay           = \"TimeOfDay\";\nlocal timeOfDayMapping    = {Morning=\"Morning\", Day=\"Day\", Evening=\"Evening\", Night=\"Night\"};\nlocal useTimeOfDay        = \"Yes\";\n-- \"HolidayLights\" is predefined variable with possible values: \"On\" and\n-- \"Off\" and can be used to set brightness of lights to predefined level,\n-- or you can even disable control of some of the lights because they\n-- are controled by other scene and VD. Exaple is for Christmas time when\n-- I use HUE lamps to change color with another scene so I disable control\n-- for them in this scene and change brightness level for other lights to\n-- improve ambient. Depending on your settings in this scene control of\n-- defined lights will be disabled and brightness level of other lights set\n-- to holiday levels only while value of this global variable is \"On\". When\n-- value change to \"Off\" this scene will resume control over all defined\n-- lights with brightness levels set with other values and HUE lights will\n-- revert to set default color!\nlocal holidayLights        = \"HolidayLights\";\nlocal holidayLightsMapping = {On=\"On\", Off=\"Off\"};\n-- if you don't want to dim other lights when holidayLights are on then\n-- leave \"No\" otherwise set to \"Yes\"\nlocal useholidayLights     = \"No\";\n\n-- SENSORS, LIGHTS, DIMMING LEVELS, EXTRA DEVICES AND TIMERS ---------------\n\n-- MOTION SENSOR(S) --------------------------------------------------------\n-- enter motion sensors or door sensors or any devices ID separated by comma\n-- that you want to turn lights on! Just MAKE SURE that you also put those \n-- ID above in header section under %% properties eg. \"30 value\"\nlocal motionID = {542};\n\n-- MOTION DETECTED WITH GLOBAL VARIABLE ------------------------------------\n-- if you use motion sensors from stand alone alarm systems from other\n-- manufacturers and not connected to Fibaro HC then you can leave motionID\n-- empty = {}. First you need to set bellow useGlobalMotion to \"Yes\" and \n-- then add global variables that are used to monitor motion sensors, as many\n-- as you need to variable globalMotionID separated by comma\nlocal useGlobalMotion = \"No\";\n-- enter global variables that will trigger this scene separated by comma.\n-- Don't forget to add all global variables also to scene header under\n-- %% globals !!!\nlocal globalMotionID = {};\n-- enter here value of the above global variables which reflect when\n-- motion sensor is breached. For example if sensor is breached and\n-- global variable change value to 1, then put this value bellow\nlocal globalMotionValue = \"\";\n-- You can also use mixed motion sensors some from Fibaro and some from\n-- other alarm systems. This is up to you!\n\n-- LIGHT SENSOR(S) ---------------------------------------------------------\n-- enter light sensor IDs separated with comma that will be used to control\n-- lights. If there is more than one then average lux is calculated! Just \n-- MAKE SURE that you also put those ID above in header section under \n-- %% properties eg. \"30 value\"\nlocal luxID    = {544};\n\n-- if you don't have light sensors just leave it empty, and also don't\n-- change default values for light levels luxMin=100 and luxMax=300!\n\n-- LIGHTS SETTINGS ---------------------------------------------------------\n\n-- VD OR PLUGIN LIGHTS (HUE) -----------------------------------------------\n-- enter lights ID controlled by VD or plugin (like HUE) separated by comma\n-- between brackets or if none leave brackets empty\nlocal VDlightID          = {};\n\n-- enter type of the VD device used for each light separated by comma:\n-- \"VDHcol\" - virtual device controlling Philips HUE white & color\n--            ambience bulb version 2.1m & 2.1b\n-- \"VDHwha\" - virtual device controlling Philips HUE wihte ambience\n--            bulb version 2.1m & 2.1b\n-- \"VDHwbr\" - virtual device controlling Philips HUE white brightness\n--            only bulb version 2.1m & 2.1b\n-- \"VDHcst\" - custom version of Philips HUE VD so please provide bellow\n--            buttons & sliders order numbers!\n-- \"PlugIn\" - Philips HUE plugin\n-- REMEMBER!! If you use VD then brightness, color and saturation can be\n-- set from 0 to 100 and if you use PlugIn then brightness and saturation\n-- can be set from 0 to 254 while color 0 - 65535!!! color temperature for\n-- white ambience bulb can be set from 153 to 500\nlocal VDlightIDtype      = {};\n-- if you use HUE VD version 2.1m then set refresh type to \"M\" else if\n-- you use HUE VD version 2.1b then set refresh type to \"B\" for each\n-- VD light, same applies for custom VD.\nlocal VDrefreshType      = {};\n-- If you use custom VD for Philips HUE then please define buttons and\n-- sliders order number. if not used then just leave empty quotes.\nlocal VDbrightnessSlider = \"2\";\nlocal VDcolorSlider      = \"3\";\nlocal VDsaturationSlider = \"4\";\nlocal VDrefreshButton    = \"5\";\n-- enter name of brightness slider if you use custom made HUE VD. This name\n-- can be found in advanced tab when editing VD:\nlocal customVDbriSliderName = \"sldBrightness\";\n-- enter name of hue(color) slider if you use custom made HUE VD. This name\n-- can be found in advanced tab when editing VD:\nlocal customVDhueSliderName = \"sldHue\";\n-- enter name of saturation slider if you use custom made HUE VD. This name\n-- can be found in advanced tab when editing VD:\nlocal customVDsatSliderName = \"sldSaturation\";\n-- enter here default values for VD color and saturation to be reset if used\n-- for holiday lights or other, REMEMBER! Values are different for VD and\n-- for \"PlugIn\" !!!\nlocal VDdefaultColor      = 20; -- VD = 1 - 100; PlugIn = 1 - 254\nlocal VDdefaultSaturation = 20; -- VD = 0 - 100; PlugIn = 0 - 65535\nlocal VDdefaultColorTemp  = 30; -- VD = 0 - 100; Plugin = 153 - 500\n-- enter which lights will be used during holiday to change color by\n-- setting light flag to 1. If you left flag 0 then scene will control\n-- light as usual. Same is for all other type of lights bellow. Flag must\n-- be defined for all lights even if you don't use HolidayLights.\nlocal VDholidayFlag      = {};\n-- enter here if you want to keep ambilight color of the HUE lamps when\n-- turned on by motion sensor or want then to use default settings. Enter\n-- \"Yes\" to keep color or \"No\" to dimm up to default settings above\nlocal keepAmbilight       = \"No\";\n\n-- DIMMER LIGHTS -----------------------------------------------------------\n-- enter lights ID controlled by DIMMER DEVICE separated by comma between \n-- brackets or if none leave brackets empty\nlocal DIMlightID         = {};\n-- enter which DIMMER lights will be used during holiday and controlled by\n-- another scene or VD by setting light flag to 1. If you left flag 0 then\n-- this scene will control light as usual.\nlocal DIMholidayFlag     = {};\n\n-- RELAY, SWITCH, SMART PLUG LIGHTS ----------------------------------------\n-- enter lights ID controlled by SWITCH (RELAY, SMART PLUG) separated by\n-- comma between brackets or if none leave brackets empty\nlocal SWTlightID         = {331};\n-- same settings as above.\nlocal SWTholidayFlag     = {};\n\n-- RGBW LIGHTS -------------------------------------------------------------\n-- enter lights ID controlled by RGBW MODULE separated by comma between\n-- brackets or if none leave brackets empty\nlocal RGBWlightID        = {};\n-- same settings as above.\nlocal RGBWholidayFlag    = {};\n-- RGBW MODULE PROGRAM AND COLORS SETTINGS ------------------------------\n-- RGBW module has some default programs and more can be added by users,\n-- here you can define your favorite program for each RGBW light and turn\n-- usage on by setting useRGBWprograms to \"Yes\". Also you can set at what \n-- time of day to use program. If you leave RGBWprogramTime empty \"\" then \n-- script will use program setting throughout all day! When program is not\n-- in use you can enter color settings and turn on color usage by setting \n-- useRGBWcolor to \"Yes\". If both program and color is set to \"No\" then \n-- LED strips will be turned on to preset brightness in dimming levels \n-- and duration section\nlocal useRGBWprograms = {\"No\"};\n-- define favorite programs for seven days of the week starting with Sunday\n-- Just enter ID of the programs separated by comma for each RGBW light:\n-- Eg for 2 lights: {{1, 3, 4, 1, 3, 1, 3}, {1, 3, 4, 1, 3, 1, 3}};\nlocal RGBWfavorite    = {{1, 3, 4, 1, 3, 1, 3}};\n-- enter at what time of day you want RGBW program to be run. Possible\n-- entries: \"Morning\", \"Day\", \"Evening\", \"Night\" or leave empty \"\" for\n-- all day for each RGBW module separately\nlocal RGBWprogramTime = {\"Evening\"};\n-- If set to \"Yes\" then color settings will be used to turn on RGBW light\n-- and can be defined for each module\nlocal useRGBWcolor    = {\"No\"};\n-- Here enter color settings for each RGBW module. Make sure that you enter\n-- settings for all colors R,G,B, & W and for all RGBW lights as this example\n-- for two: {{R=255, G=255, B=50, W=100}, {R=155, G=155, B=150, W=100}};\nlocal RGBWcolor       = {{R=169, G=56, B=0, W=100}};\n \n-- LIGHT LEVELS -----------------------------------------------------------\n-- enter minimum light level measured by luxID sensor(s) at which lights\n-- will turn ON during day time if light sensor is not used then leave the\n-- default value 100!\nlocal luxMin          = 30;\n-- enter maximum light level measured by luxID sensor at which lights will\n-- be turned OFF if light sensor is not used then leave the default\n-- value 300!\nlocal luxMax          = 100;\n\n-- TURN OFF OR DIMM LIGHTS ------------------------------------------------\n-- to have lights dim low instead of turning off, first set dimOff to true.\n-- If you want ligths to stay dimmed low even during sleep then also set\n-- keepDimSleep to true. After that you still need bellow to enable at\n-- which time of day you want lights to dim low and set brightness levels\n-- and also set useDimLow to true.\nlocal dimOff          = false;\n-- define here if you want to keep dimmed lights during sleep 'true' or you\n-- want them to turn off 'false'\nlocal keepDimSleep    = false;\n-- define here if you want scene to remember previous settings of HUE lamps\n-- so when tere is no motion in room anymore to dimm them to previous\n-- ambilight. Enter \"Yes\" to remember, \"No\" to keep to default settings\nlocal dimOffAmbilight = \"No\";\n-- define dimming level for VD(HUE) lights when no movement detected \n-- 0 - turned off 1 to 100 dimmed. You can define for each HUE lamp \n-- different dim level just enter for each light value in braces separated\n-- by comma like {20, 10}\n-- NEW from version 1.3.4 now you can set dimOff levels for all times of\n-- day\n\n-- * MORNING * -------------------------------------------------------------\nlocal dimVDlowMorning  = {};\n-- define dimming level for each light controlled by DIMMER when no movement \n-- detected. Same as above\nlocal dimDIMlowMorning = {};\n-- define dimming level for each light controlled by RGBW when no movement \n-- detected. Same as above\nlocal dimRGBlowMorning = {};\n-- define for each light controlled by SWITCH will turn off when no movement \n-- detected. 0 - turn off, or 1 to stay on\nlocal valSWTlowMorning = {1};\n-- define \"Yes\" here for each RGBW if you want favorite program to continue\n-- running or \"No\" to enable use of predefined color settings or just\n-- turn it off when no one is in room and timer finished counting\n-- NOTE to keep program running you need to set dimRGBlow greater than zero!\nlocal dimRGBprogramMorning = {\"No\"};\n-- define \"Yes\" here for each RGBW light if you want to be set to predefined\n-- color at above dimlow brightness or \"No\" to just dim it low at present\n-- color settings\n-- NOTE to keep color on you need to set dimRGBlow to beightness value greater\n-- than zero\nlocal dimRGBcolorMorning = {\"No\"};\n-- define if you want lights to dim low at Morning time 'true' or 'false'\nlocal useDimLowMorning = false;\n\n-- * DAY * ---------------------------------------------------------------\nlocal dimVDlowDay  = {};\n-- define dimming level for each light controlled by DIMMER when no movement \n-- detected. Same as above\nlocal dimDIMlowDay = {};\n-- define dimming level for each light controlled by RGBW when no movement \n-- detected. Same as above\nlocal dimRGBlowDay = {};\n-- define for each light controlled by SWITCH will turn off when no movement \n-- detected. 0 - turn off, or 1 to stay on\nlocal valSWTlowDay = {1};\n-- define \"Yes\" here for each RGBW if you want favorite program to continue\n-- running or \"No\" to enable use of predefined color settings or just\n-- turn it off when no one is in room and timer finished counting\n-- NOTE to keep program running you need to set dimRGBlow greater than zero!\nlocal dimRGBprogramDay = {\"No\"};\n-- define \"Yes\" here for each RGBW light if you want to be set to predefined\n-- color at above dimlow brightness or \"No\" to just dim it low at present\n-- color settings\n-- NOTE to keep color on you need to set dimRGBlow to beightness value greater\n-- than zero\nlocal dimRGBcolorDay = {\"No\"};\n-- define if you want lights to dim low at Day time 'true' or 'false'\nlocal useDimLowDay = false;\n-- same as above but for night time\n\n-- * EVENING * ---------------------------------------------------------------\nlocal dimVDlowEvening  = {};\n-- define dimming level for each light controlled by DIMMER when no movement \n-- detected. Same as above\nlocal dimDIMlowEvening = {};\n-- define dimming level for each light controlled by RGBW when no movement \n-- detected. Same as above\nlocal dimRGBlowEvening = {};\n-- define for each light controlled by SWITCH will turn off when no movement \n-- detected. 0 - turn off, or 1 to stay on\nlocal valSWTlowEvening = {1};\n-- define \"Yes\" here for each RGBW if you want favorite program to continue\n-- running or \"No\" to enable use of predefined color settings or just\n-- turn it off when no one is in room and timer finished counting\n-- NOTE to keep program running you need to set dimRGBlow greater than zero!\nlocal dimRGBprogramEvening = {\"No\"};\n-- define \"Yes\" here for each RGBW light if you want to be set to predefined\n-- color at above dimlow brightness or \"No\" to just dim it low at present\n-- color settings\n-- NOTE to keep color on you need to set dimRGBlow to beightness value greater\n-- than zero\nlocal dimRGBcolorEvening = {\"No\"};\n-- define if you want lights to dim low at Evening time 'true' or 'false'\nlocal useDimLowEvening = false;\n-- same as above but for night time\n-- * NIGHT * -----------------------------------------------------------------\nlocal dimVDlowNight      = {};\n-- define dimming level for each light controlled by DIMMER when no movement \n-- detected. Same as above\nlocal dimDIMlowNight     = {};\n-- define dimming level for each light controlled by RGBW when no movement \n-- detected. Same as above\nlocal dimRGBlowNight     = {};\n-- define for each light controlled by SWITCH will turn off when no movement \n-- detected. 0 - turn off, or 1 to stay on\nlocal valSWTlowNight     = {1};\n-- define \"Yes\" here for each RGBW if you want favorite program to continue\n-- running or \"No\" to enable use of predefined color settings or just\n-- turn it off when no one is in room and timer finished counting\n-- NOTE to keep program running you need to set dimRGBlow greater than zero!\nlocal dimRGBprogramNight = {\"No\"};\n-- define \"Yes\" here for each RGBW light if you want to be set to predefined\n-- color at above dimlow brightness or \"No\" to just dim it low at present\n-- color settings\n-- NOTE to keep color on you need to set dimRGBlow to beightness value greater\n-- than zero\nlocal dimRGBcolorNight = {\"No\"};\n-- define if you want lights to dim low at Night time 'true' or 'false'\nlocal useDimLowNight = false;\n\n-- LIGHT DIMMING LEVELS AND TIMER DURATION SETTINGS ---------------------\n\n-- DIMMING LEVELS AND TIMER DURATION WITH GLOBAL VARIABLES --------------\n-- bellow you can set dimming levels for each VD, DIMMER, RGBW module \n-- controlled lights for different situations. This will work\n-- only if you first enable usage of each situation by setting usage\n-- variable to \"Yes\".\n-- Dimming levels of other lights when holiday lights are turned On for\n-- each light in braces separated by comma.\n-- NOTE - at the moment duration is one and same for all lights!\n-- Enter brightness setting for each light when useGuestState is set\n-- to Yes and GuestState is set to Yes:\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDGuest     = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMGuest    = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBGuest    = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTGuest    = {};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durGuest       = 120;\n-- Enter brightness setting for each light when useCookingState is set\n-- to Yes and CookingState is set to Yes:\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDCooking    = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMCooking   = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBCooking   = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTCooking   = {};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durCooking      = 120;\n-- Enter brightness setting for each light when useMealState is set\n-- to Yes and MealState is set to Yes:\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDMeal       = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMMeal      = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBMeal      = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTMeal      = {};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durMeal         = 120;\n-- Enter brightness setting for each light when useProjectorState is set\n-- to Yes and ProjectorState is set to Yes:\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDProjector  = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMProjector = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBProjector = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTProjector = {};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durProjector    = 120;\n-- Enter brightness setting for each light when useCinemaState is set\n-- to Yes and CinemaState is set to Yes:\n-- brightness setting for each VD/PlugIn(HUE) light:\n-- Enter brightness setting for each light when useCinemaState is set\n-- to Yes and CinemaState is set to Yes:\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDCinema    = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMCinema   = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBCinema   = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTCinema   = {};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durCinema      = 120;\n-- Enter brightness setting for each light when useHolidayLights is set\n-- to Yes and holiday lights are turned on:\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDholiday  = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMholiday = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBholiday = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTholiday = {};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durholiday    = 90;\n-- SleepState = Awake dimming levels and timer duration (when we are \n-- awake and light lux is low and is used when variable useTimeOfDay \n-- is set to \"No\"!!\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDAwake     = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMAwake    = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBAwake    = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTAwake    = {1};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durAwake       = 180;\n-- SleepState = Sleep and/or indoorLightsDim dimming levels and \n-- duration (when we are sleeping) brightness setting for each \n-- VD/PlugIn(HUE) light when SleepState is sleep:\n-- brightness setting for each VD/PlugIn(HUE) light:\nlocal dimVDSleep     = {};\n-- brightness setting for each DIMMER light:\nlocal dimDIMSleep    = {};\n-- brightness setting for each RGBW light:\nlocal dimRGBSleep    = {};\n-- brightness setting for each SWITCH/RELAY/PLUG light:\nlocal valSWTSleep    = {0};\n-- after no motion detected keep lights on time setting in seconds:\nlocal durSleep       = 45;\n\n-- DIMMING LEVELS AND TIMER WITH TIME OF DAY -----------------------------\n-- If all special events (Guest, Cinema, indoor lights, holiday lights)\n-- are disabled by setting usage to \"No\" or are not activated with global\n-- value then lights dimming level will be set depending on settings of \n-- the following local variable:\n-- if useTimeOfDay is set to:\n--    \"No\"  - use dimDIMAwake, dimVDAwake and durAwake, \n--    \"Yes\" - use timeOfDay settings bellow:\n-- NOTE - at the moment duration is one and same for all lights!\n\n-- *** MORNING ***\n-- setting for each VD/PlugIn(HUE) light for MORNING time:\nlocal dimVDMorning    = {};\n-- setting for each light controlled by DIMMER for MORNING time:\nlocal dimDIMMorning   = {};\n-- setting for each RGBW light for MORNING time:\nlocal dimRGBMorning   = {};\n-- setting for each SWITCH light for MORNING time:\nlocal valSWTMorning   = {1};\n-- timer duration setting for MORNING time in seconds:\nlocal durationMorning = 120;\n\n-- *** DAY ***\n-- setting for each VD(HUE) light for DAY time:\nlocal dimVDDay        = {};\n-- setting for each light controlled by DIMMER for DAY time:\nlocal dimDIMDay       = {};\n-- setting for each RGBW light for DAY time:\nlocal dimRGBDay       = {};\n-- setting for each SWITCH light for DAY time:\nlocal valSWTDay       = {1};\n-- timer duration setting for DAY time in seconds:\nlocal durationDay     = 180;\n\n-- *** EVENING ***\n-- setting for each VD(HUE) light for EVENING time:\nlocal dimVDEvening    = {};\n-- setting for each light controlled by DIMMER for EVENING time:\nlocal dimDIMEvening   = {};\n-- setting for each RGBW light for EVENING time:\nlocal dimRGBEvening   = {};\n-- setting for each SWITCH light for EVENING time:\nlocal valSWTEvening   = {1};\n-- timer duration setting for EVENING time in seconds:\nlocal durationEvening = 120;\n\n-- *** NIGHT ***\n-- setting for each VD(HUE) light for NIGHT time:\nlocal dimVDNight      = {};\n-- setting for each light controlled by DIMMER for NIGHT time:\nlocal dimDIMNight     = {};\n-- setting for each RGBW light for NIGHT time:\nlocal dimRGBNight     = {};\n-- setting for each SWITCH light for NIGHT time:\nlocal valSWTNight     = {1};\n-- timer duration setting for NIGHT time in seconds:\nlocal durationNight   = 60;\n\n-- CHECK LIGHT STATUS!! --------------------------------------------------\n-- if you want to be able to switch off lights before any timer is done\n-- then set this variable to \"true\" else leave \"false\". If set to false\n-- lights will turn off after defined time from last movement detected\n-- if set to true then if you turn off one light manually other will\n-- also turn off as soon as motion sensor change status to safe and\n-- regardless of extra devices and/or timers active.\nlocal checkLightOff   = true;\n\n-- TIMER CORRECTION TIME!! -----------------------------------------------\n-- please check your motion sensor parameter 6 settings and put it here so\n-- that timer duration is corrected to be exact as you entered above \n-- (30 sec is default setting for Fibaro motion sensor):\nlocal PIRwindowTime   = 30;\n\n-- EXTRA DEVICES (VALUE) TO KEEP LIGHTS ON -------------------------------\n-- Here you can define some extra conditions that will keep lights on until\n-- changed. Enter devices ID separated by comma in table that you want to \n-- keep lights on. If breached put 1 or if safe put 0 in extraDeviceValue\n-- Example is light in bathroom, if you put here bathroom door sensor ID\n-- and 0 for door closed then light will stay on even motion is not\n-- detected as long as door is closed. Light can be still turned off\n-- manually and if checkLightOff is set to true then scene will stop\n-- before timer is counted to zero.\n extraDeviceID    = {};\n extraDeviceValue = {};\n-- if you want to enable EXTRA DEVICES (VALUE) to keep lights on when\n-- SleepState is set to Sleep then set extraDeviceSleep to true otherwise\n-- set it to false\n extraDeviceSleep = false;\n\n-- EXTRA DEVICES (POWER) TO KEEP LIGHTS ON -------------------------------\n-- enter devices ID separated with comma in table that read power \n-- consumption and will keep lights on as long as power consumption is \n-- grater than value put in table setPower in watts. For example if you\n-- put here study table light smart plug ID and 10W then scene will keep\n-- lights on as long as study table light is on and draws power greater\n-- than 10W.\n extraPowerID    = {};\n setPower        = {};\n-- if you want to enable EXTRA DEVICES (POWER) to keep lights on when\n-- SleepState is set to Sleep then set extraDeviceSleep to true otherwise\n-- set it to false\n extraPowerSleep = false;\n\n-- GLOBAL VARIABLES STATE TO KEEP LIGHTS ON ------------------------------\n-- enter global variable names separated by comma in table that will keep\n-- lights on as long as their value is same as value in table\n-- extraGlobalValue. Ex.: extraGlobalName  = {\"CinemaState\", \"GuestState\"}\n--                        extraGlobalValue = {\"Yes\", \"Yes\"}\n-- In above example if any or both global variables \"CinemaState\" and\n-- \"GuestState\" value is set to \"Yes\" then scene will keep lights on.\n-- As soon as their value is set back to \"No\" scene will enable timer\n-- and turn off lights after defined time if no motion detected.\n-- Of course if you don't need this feature just leave brackets empty {}\nextraGlobalName       = {};\nextraGlobalValue      = {};\n-- if you want to enable EXTRA GLOBAL VARIABLE to keep lights on when\n-- SleepState is set to Sleep then set extraDeviceSleep to true otherwise\n-- set it to false\nextraGlobalSleep = false;\n\n-- EXTRA TIMERS TO KEEP LIGHTS ON --------------------------------------- \n-- here you can enable (true) extra timer that will keep lights on from\n-- specific time like wakeup time from alarm clock and for how long. \n-- Lights will still go off if there is enough light in the room. Time \n-- format must be in string format \"HH:MM\"\n extraTimerEnable   = false;\n-- enter name of the global variable for Alarm clock status and map your\n-- values for On and Off status\n timerStatus        = \"AlarmClockStatus\";\n timerStatusMapping = {On=\"On\", Off=\"Off\"};\n-- here enter name of global variable to enable/disable particular timer\n-- eg. check if AlarmClockDays1 that is generated by jompa68 ACWUT \n-- (AlarmClock + WakeUpTime) version 3.0.0 is active or turned off and\n-- define for which value timer will be enabled\n timerCheckName     = {\"AlarmClockDays1\", \"AlarmClockDays2\"};\n timerCheckValue    = {\"Weekdays\", \"Weekends\"};\n-- set mapping for alarm days if you use them in your language\n timerValueMapping  = {Weekdays=\"Weekdays\", Weekends=\"Weekends\",\n                       Monday=\"Monday\", Tuesday=\"Tuesday\",\n                       Wednesday=\"Wednesday\", Thursday=\"Thursday\",\n                       Friday=\"Friday\", Saturday=\"Saturday\",\n                       Sunday=\"Sunday\", Off=\"Off\"};\n-- here you enter name of global variable(s) which value is specific\n-- time in format HH:MM (like alarm clock)\n timerStartTimeName = {\"AlarmClockTime1\", \"AlarmClockTime2\"};\n-- here you enter for how long timer will keep lights on, eg. \"01:00\"\n-- will keep for 1 hour, \"00:30\" will keep for 30 min from specified time\n-- by AlarmClockTime1 and/or AlarmClockTime2\n timerDurationTime  = {\"01:30\", \"01:30\"};\n\n-- ACTIVATE DEVICE, VD, SCENE OR CHANGE GLOBAL VARIABLE VALUE WITH TIMER --\n-- scene has timer that counts seconds from 0 up from time when is first\n-- triggered by motion sensor and while is running. This timer can be used\n-- to start devices or scenes or change value of global variables at time \n-- specified in seconds. If scene stops running before start time is reached\n-- then nothing will happen. This can be used to start extraction fan in \n-- bathroom if you stay there longer than some specified time or anything\n-- else you may want to start or even stop after defined time starting from\n-- breaching motion sensor and starting this scene!!\n\n-- ACTIVATE DEVICE --------------------------------------------------------\n-- enter device ID separated by comma which you like to start between {}\n-- brackets like {123, 50}, if none just leave brackets empty\nlocal exDeviceID      = {};\n-- enter value for each device above separated by comma as follows:\n-- 400 - this value will just turn on device - \"turnOn\"\n--   0 - this will actually turn off device - \"turnOff\"\n-- 1 to 100 - this will turn on device with this value - \"value\" or will\n--            change device value if it is already turned on\n-- -1 to -100 - this will set value for device and then turn it on which\n--              means that first value will be set and then \"turnOn\"\n--              command executed.\nlocal exDeviceValue   = {}\n-- enter time in seconds after which you want to start above device(s)\n-- separated by comma like {180, 240}. Each device can have different time.\nlocal exDeviceTime    = {};\n\n-- ACTIVATE BUTTON ON VIRTUAL DEVICE --------------------------------------\n-- enter VD ID separated by comma which you like to activate between {}\n-- brackets like {123, 50}, if none just leave brackets empty\nlocal exVDeviceID     = {};\n-- enter number of button with quotation marks like {\"2\", \"5\"} that will be\n-- pressed\nlocal exVDeviceButton = {}\n-- enter time in seconds after which you want to press button on above VD(s)\n-- separated by comma like {180, 240}. Each VD can have different time.\nlocal exVDeviceTime   = {};\n\n\n-- START SCENE ------------------------------------------------------------\n-- enter scene(s) ID separated by comma which you like to start between {}\n-- brackets like {30, 28} if none just leave brackets empty\nlocal exSceneID     = {};\n-- enter time in seconds after which you want to start above scene(s)\n-- separated by comma like {180, 240}. Each scene can have different time.\nlocal exSceneTime   = {};\n\n-- CHANGE GLOBAL VARIABLE VALUE--------------------------------------------\n-- NOTE: if you use global variables to control extra devices then you need\n-- to define those global variables in global variable panel first!!\n-- enter global variable name(s) separated by comma of which you like to\n-- change value eg. {\"Global1\", \"Global2\"}. if none just leave brackets \n-- empty\nlocal exGlobal      = {};\n-- enter for each global variable what value you want to set separated by\n-- comma like {\"Value1\", 1}. Can be string value with \"\", or numerical\n-- value. \nlocal exGlobalValue = {};\n-- enter time in seconds after which you want global variable to change\n-- value separated by comma like {180, 240}. Each global variable can have\n-- different time.\nlocal exGlobalTime  = {};\n\n-- DEBUGGING VARIABLES ---------------------------------------------------\n-- setup debugging, true is turned on, false turned off.\nlocal deBug           = true;  -- for showing events as they happen like\n                               -- turning on/off lights etc.\nlocal lightdebug      = false; -- debuging procedures to control light\n                               -- bulbs\nlocal timerdeBug      = false; -- for testing main timer of the loop and\n                               -- will repeat every second\nlocal exFlag          = true;  -- for testing extra devices and globals,\n                               -- will show only first occurrence\nlocal chFlag          = true;  -- for testing extra timer, will show only\n                               -- first occurrence\n-- END OF CODE PART FOR USERS TO EDIT AND SETUP --------------------------\n\n-- BELLOW CODE NO NEED TO MODIFY BY USER ---------------------------------\n-- except if you know what you're doin' :-P\n\n-- setup some local variables\nlocal version         = \"1.4.0\";\nlocal luxMeas         = \"\";\nlocal countdown       = 0;\nlocal exTimer         = 0;\nlocal time            = os.date('*t');\nlocal currentwday     = time['wday'];\nlocal chState         = false;\nlocal chLight         = false;\nlocal chLevel         = false;\nlocal adjusted        = false;\nlocal motion          = false;\nlocal errFlag         = false;\nlocal VDhueAmbilight  = {};\nlocal VDsatAmbilight  = {};\nlocal VDctAmbilight   = {};\ncustomBriSlider = \"ui.\"..customVDbriSliderName..\".value\";\ncustomHueSlider = \"ui.\"..customVDhueSliderName..\".value\";\ncustomSatSlider = \"ui.\"..customVDsatSliderName..\".value\";\nlocal StartSource     = fibaro:getSourceTrigger();\n\n-- debugging function in color\nfunction logbug(color, message)\n  fibaro:debug(string.format('<%s style=\"color:%s;\">%s</%s>', \"span\", color, message, \"span\")); \nend\n\n-- get current status\nfunction getCurrentState()\n  presentStateCurrent    = fibaro:getGlobalValue(presentState);\n  sleepStateCurrent      = fibaro:getGlobalValue(sleepState);\n  if sleepingName ~= \"\" then\n    sleepingCurrent      = fibaro:getGlobalValue(sleepingName);\n  else\n    sleepingCurrent      = sleepingMapping.No;\n  end\n  lightStateCurrent      = fibaro:getGlobalValue(lightState);\n  timeOfDayCurrent       = fibaro:getGlobalValue(timeOfDay);\n  indoorLightsCurrent    = fibaro:getGlobalValue(indoorLightsDim);\n  cinemaStateCurrent     = fibaro:getGlobalValue(cinemaState);\n  projectorStateCurrent  = fibaro:getGlobalValue(projectorState);\n  cookingStateCurrent    = fibaro:getGlobalValue(cookingState);\n  mealStateCurrent       = fibaro:getGlobalValue(mealState);\n  holidayLightsCurrent   = fibaro:getGlobalValue(holidayLights);\n  guestStateCurrent      = fibaro:getGlobalValue(guestState);\n  darknessCurrent        = fibaro:getGlobalValue(darkness);\n  -- setup array to turn off lights\n  if #VDlightID > 0 then\n    VDoff = {};\n    for i = 1, #VDlightID do\n      VDoff[i] = 0;\n    end\n  end\n  if #DIMlightID > 0 then\n    DIMoff = {};\n    for i = 1, #DIMlightID do\n      DIMoff[i] = 0;\n    end\n  end\n  if #RGBWlightID > 0 then\n    RGBWoff = {};\n    for i = 1, #RGBWlightID do\n      RGBWoff[i] = 0;\n    end\n  end\n  if #SWTlightID > 0 then\n    SWToff = {};\n    for i = 1, #SWTlightID do\n      SWToff[i] = 0;\n    end\n  end\nend\n\n-- Adjust dim level and duration for different situations and/or time of day\nfunction adjustLevels()\n  if ((useGuestState == \"Yes\") and\n      (fibaro:getGlobalValue(guestState) == guestStateMapping.Yes)) then\n    if deBug then logbug(\"violet\", \"Adjusted levels to guest\") end;\n    dimDIM   = dimDIMGuest;\n    dimVD    = dimVDGuest;\n    dimRGB   = dimRGBGuest;\n    valSWT   = valSWTGuest;\n    duration = durGuest;\n  elseif ((useCookingState == \"Yes\") and\n          (fibaro:getGlobalValue(cookingState) == cookingStateMapping.Yes)) then\n    if deBug then logbug(\"violet\", \"Adjusted levels to cooking\") end;\n    dimDIM   = dimDIMCooking;\n    dimVD    = dimVDCooking;\n    dimRGB   = dimRGBCooking;\n    valSWT   = valSWTCooking;\n    duration = durCooking;\n  elseif ((useMealState == \"Yes\") and\n          (fibaro:getGlobalValue(mealState) == mealStateMapping.Yes)) then\n    if deBug then logbug(\"violet\", \"Adjusted levels to mealtime\") end;\n    dimDIM   = dimDIMMeal;\n    dimVD    = dimVDMeal;\n    dimRGB   = dimRGBMeal;\n    valSWT   = valSWTMeal;\n    duration = durMeal;\n  elseif ((useProjectorState == \"Yes\") and\n          (fibaro:getGlobalValue(projectorState) == projectorStateMapping.Yes)) then\n    if deBug then logbug(\"violet\", \"Adjusted levels to projector\") end;\n    dimDIM   = dimDIMProjector;\n    dimVD    = dimVDProjector;\n    dimRGB   = dimRGBProjector;\n    valSWT   = valSWTProjector;\n    duration = durProjector;\n  elseif ((useCinemaState == \"Yes\") and\n          (fibaro:getGlobalValue(cinemaState) == cinemaStateMapping.Yes)) then\n    if deBug then logbug(\"violet\", \"Adjusted levels to cinema\") end;\n    dimDIM   = dimDIMCinema;\n    dimVD    = dimVDCinema;\n    dimRGB   = dimRGBCinema;\n    valSWT   = valSWTCinema;\n    duration = durCinema;\n  elseif ((useholidayLights == \"Yes\") and \n      (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.On)) then\n    if deBug then logbug(\"violet\",\"Adjusted levels to holiday lights\") end;\n    dimDIM   = dimDIMholiday;\n    dimVD    = dimVDholiday;\n    dimRGB   = dimRGBholiday;\n    valSWT   = valSWTholiday;\n    duration = durholiday;\n  elseif ((useIndoorLights == \"Yes\") and\n          (fibaro:getGlobalValue(indoorLightsDim) == indoorLightsMapping.Yes)) then\n    if deBug then logbug(\"violet\", \"Adjusted levels indoor lights\") end;\n    dimDIM   = dimDIMSleep;\n    dimVD    = dimVDSleep;\n    dumRGB   = dimRGBSleep;\n    valSWT   = valSWTSleep;\n    duration = durSleep;\n  elseif ((useSleepState == \"Yes\") and\n          (fibaro:getGlobalValue(sleepState) == sleepStateMapping.Sleep)) then\n    if deBug then logbug(\"violet\", \"Adjusted levels to sleep\") end;\n    dimDIM   = dimDIMSleep;\n    dimVD    = dimVDSleep;\n    dimRGB   = dimRGBSleep;\n    valSWT   = valSWTSleep\n    duration = durSleep;\n  else  \n    if useTimeOfDay == \"No\" then\n      if deBug then logbug(\"violet\", \"Adjusted levels to awake\") end;\n      dimDIM   = dimDIMAwake;\n      dimVD    = dimVDAwake;\n      dimRGB   = dimRGBAwake;\n      valSWT   = valSWTAwake;\n      duration = durAwake;\n    else\n      if fibaro:getGlobalValue(timeOfDay) == timeOfDayMapping.Morning then\n        if deBug then logbug(\"violet\", \"Adjusted levels to Morning time\") end;\n        dimDIM   = dimDIMMorning;\n        dimVD    = dimVDMorning;\n        dimRGB   = dimRGBMorning;\n        valSWT   = valSWTMorning;\n        duration = durationMorning;\n      elseif fibaro:getGlobalValue(timeOfDay) == timeOfDayMapping.Day then\n        if deBug then logbug(\"violet\", \"Adjusted levels to Day time\") end;\n        dimDIM   = dimDIMDay;\n        dimVD    = dimVDDay;\n        dimRGB   = dimRGBDay;\n        valSWT   = valSWTDay;\n        duration = durationDay;\n      elseif fibaro:getGlobalValue(timeOfDay) == timeOfDayMapping.Evening then\n        if deBug then logbug(\"violet\", \"Adjusted levels to Evening time\") end;\n        dimDIM   = dimDIMEvening;\n        dimVD    = dimVDEvening;\n        dimRGB   = dimRGBEvening;\n        valSWT   = valSWTEvening;\n        duration = durationEvening;\n      else\n        if deBug then logbug(\"violet\", \"Adjusted levels to Night time\") end;\n        dimDIM   = dimDIMNight;\n        dimVD    = dimVDNight;\n        dimRGB   = dimRGBNight;\n        valSWT   = valSWTNight;\n        duration = durationNight;\n      end\n    end\n  end\n  adjusted = true;\nend\n\n-- adjust dim level for Evening or Night time for dimOff\nfunction dimOffLevels()\n  if ((useDimLowMorning) and (fibaro:getGlobalValue(timeOfDay) == timeOfDayMapping.Morning)) then\n    if deBug then logbug(\"violet\", \"Adjusted dim low levels to Morning time\") end;\n    dimVDlow      = dimVDlowMorning;\n    dimDIMlow     = dimDIMlowMorning;\n    dimRGBlow     = dimRGBlowMorning;\n    valSWTlow     = valSWTlowMorning;\n    dimRGBprogram = dimRGBprogramMorning;\n    dimRGBcolor   = dimRGBcolorMorning;\n    useDimLow     = useDimLowMorning;\n  elseif ((useDimLowDay) and (fibaro:getGlobalValue(timeOfDay) == timeOfDayMapping.Day)) then\n    if deBug then logbug(\"violet\", \"Adjusted dim low levels to Day time\") end;\n    dimVDlow      = dimVDlowDay;\n    dimDIMlow     = dimDIMlowDay;\n    dimRGBlow     = dimRGBlowDay;\n    valSWTlow     = valSWTlowDay;\n    dimRGBprogram = dimRGBprogramDay;\n    dimRGBcolor   = dimRGBcolorDay;\n    useDimLow     = useDimLowDay;\n  elseif ((useDimLowEvening) and (fibaro:getGlobalValue(timeOfDay) == timeOfDayMapping.Evening)) then\n    if deBug then logbug(\"violet\", \"Adjusted dim low levels to Evening time\") end;\n    dimVDlow      = dimVDlowEvening;\n    dimDIMlow     = dimDIMlowEvening;\n    dimRGBlow     = dimRGBlowEvening;\n    valSWTlow     = valSWTlowEvening;\n    dimRGBprogram = dimRGBprogramEvening;\n    dimRGBcolor   = dimRGBcolorEvening;\n    useDimLow     = useDimLowEvening;\n  elseif ((useDimLowNight) and (fibaro:getGlobalValue(timeOfDay) == timeOfDayMapping.Night)) then\n    if deBug then logbug(\"violet\", \"Adjusted dim low levels to Night time\") end;\n    dimVDlow      = dimVDlowNight;\n    dimDIMlow     = dimDIMlowNight;\n    dimRGBlow     = dimRGBlowNight;\n    valSWTlow     = valSWTlowNight;\n    dimRGBprogram = dimRGBprogramNight;\n    dimRGBcolor   = dimRGBcolorNight;\n    useDimLow     = useDimLowNight;\n  else\n    if deBug then logbug(\"violet\", \"Dim low levels for \"..fibaro:getGlobalValue(timeOfDay)..\n                          \" not set. Lights will turn Off\") end;\n  end\nend\n\n\n-- check if custom VD is set properly\nfunction checkCustomVD()\n  check = true;\n  what  = \"\";\n  if VDbrightnessSlider == \"\" then\n    what = \"brightness slider order number\";\n  elseif VDcolorSlider == \"\" then\n    what = \"color slider order number\";\n  elseif VDsaturationSlider == \"\" then\n    what = \"color slider order number\";\n  elseif VDrefreshButton == \"\" then\n    what = \"refresh button order number\";\n  elseif customVDbriSliderName == \"\" then\n    what = \"brightness slider name\";\n  elseif customVDhueSliderName == \"\" then\n    what = \"color slider name\";\n  elseif customVDsatSliderName == \"\" then\n    what = \"saturation slider name\";\n  end\n  if what ~= \"\" then\n    logbug(\"red\", \"ERROR! Custom VD \"..what..\" not defined. Please check settings.\");\n    check = false;\n  end\n  return check\nend\n\n-- check if lights settings are ok\nfunction checkUserSettings(f, cdim)\n  -- f=1 check VD settings   -- f=2 check DIMMER settings\n  -- f=3 check RGBW settings -- f=4 check SWITCH settings\n  check = true;\n  if f == 1 then\n    if #VDlightID > #cdim then\n      logbug(\"red\", \"ERROR! One of VD lights is missing dimOff value. Please correct settings.\");\n      check = false;\n    elseif #VDlightID > #VDlightIDtype then\n      logbug(\"red\", \"ERROR! One of VD lights is missing VDlightIDtype definition. Please correct settings.\");\n      check = false;\n    elseif #VDlightID > #VDrefreshType then\n      logbug(\"red\", \"ERROR! One of VD lights is missing VDrefreshType definition. Please correct settings.\");\n      check = false;\n    end\n  elseif f == 2 then\n    if #DIMlightID > #cdim then\n      logbug (\"red\", \"ERROR! One of DIMMER lights is missing dimOff value. Please correct settings.\");\n      check = false;\n    end\n  elseif f == 3 then\n    if #RGBWlightID > #cdim then\n      logbug(\"red\", \"ERROR! One of RGBW lights is missing dimOff value. Please correct settings.\");\n      check = false;\n    end\n  elseif f == 4 then\n    if #SWTlightID > #cdim then\n      logbug(\"red\", \"ERROR! One of SWITCH lights is missing dimOff value. Please correct settings.\");\n      check = false;\n    end\n  end\n  return check\nend\n\n-- collect color settings of UHE lamps\nfunction getAmbilight()\n  for i = 1, #VDlightID do\n    if VDlightIDtype[i] == \"VDHcol\" then\n      if VDrefreshType[i] == \"B\" then\n        fibaro:call(VDlightID[i], \"pressButton\", \"5\");\n        fibaro:sleep(50);\n      end\n      VDhueAmbilight[i] = fibaro:getValue(VDlightID[i], \"ui.sldHue.value\");\n      VDsatAmbilight[i] = fibaro:getValue(VDlightID[i], \"ui.sldSaturation.value\");\n      if lightdebug then logbug(\"yellow\", \"VDHcol - HUE color ambience light ambi setting stored\") end;\n    elseif VDlightIDtype[i] == \"VDHwha\" then\n      if VDrefreshType[i] == \"B\" then\n        fibaro:call(VDlightID[i], \"pressButton\", \"4\");\n        fibaro:sleep(50);\n      end\n      VDctAmbilight[i] = fibaro:getValue(VDlightID[i], \"ui.sldCt.value\");\n      if lightdebug then logbug(\"yellow\", \"VDHwha - HUE white ambience light ambi setting stored\") end;\n    elseif VDlightIDtype[i] == \"VDHcst\" then\n      if checkCustomVD() then\n        if VDrefreshType[i] == \"B\" then\n          fibaro:call(VDlightID[i], \"pressButton\", VDrefreshButton);\n          fibaro:sleep(50);\n        end\n        VDhueAmbilight[i] = fibaro:getValue(VDlightID[i], VDcolorSlider);\n        VDsatAmbilight[i] = fibaro:getValue(VDlightID[i], VDsaturationSlider);\n        if lightdebug then logbug(\"yellow\", \"VDHcst - custom HUE VD light ambi setting stored\") end;\n      end\n    elseif VDlightIDtype[i] == \"PlugIn\" then\n      VDhueAmbilight[i] = fibaro:getValue(VDlightID[i], \"ui.Hue.value\");\n      VDsatAmbilight[i] = fibaro:getValue(VDlightID[i], \"ui.Saturation.value\");\n      if lightdebug then logbug(\"yellow\", \"PlugIn - HUE color ambience light ambi setting stored\") end;\n    else\n      logbug(\"red\", \"Type of HUE VD light not defined. Please check.\")\n    end\n  end\n  if deBug then logbug(\"yellow\", \"HUE lamps color settings stored in memory\") end;\nend\n\n-- function that dims low or turns off VD lights\nfunction turnOffVDlight(i, Vdim)\n  local check = false; --lights no change\n  if lightdebug then logbug(\"yellow\", VDlightIDtype[i]..\" - HUE light: \"..\n                            fibaro:getName(VDlightID[i])..\" dim set to \"..Vdim) end;\n if ((VDlightIDtype[i] == \"VDHcol\") or (VDlightIDtype[i] == \"VDHwha\") or (VDlightIDtype[i] == \"VDHwbr\")) then\n    if dimOffAmbilight == \"Yes\" then\n      if VDlightIDtype[i] == \"VDHcol\" then\n        fibaro:call(VDlightID[i], \"setSlider\", \"3\", VDhueAmbilight[i]);\n        fibaro:call(VDlightID[i], \"setSlider\", \"4\", VDsatAmbilight[i]);\n      elseif VDlightIDtype[i] == \"VHDwha\" then\n        fibaro:call(VDlightID[i], \"setSlider\", \"3\", VDctAmbilight[i]);\n      end\n    end\n    if (tonumber(fibaro:getValue(VDlightID[i], \"ui.sldBrightness.value\")) ~= Vdim) then\n      fibaro:call(VDlightID[i], \"setSlider\", \"2\", Vdim);\n      check = true;\n    end\n    if VDrefreshType[i] == \"B\" then\n      if VDlightIDtype[i] == \"VDHcol\" then\n        fibaro:call(VDlightID[i], \"pressButton\", \"5\");\n      elseif VDlightIDtype[i] == \"VHDwha\" then\n        fibaro:call(VDlightID[i], \"pressButton\", \"4\");\n      else\n        fibaro:call(VDlightID[i], \"pressButton\", \"3\");\n      end\n    end\n  elseif VDlightIDtype[i] == \"VDHcst\" then\n    if checkCustomVD() then\n      if dimOffAmbilight == \"Yes\" then\n        fibaro:call(VDlightID[i], \"setSlider\", VDcolorSlider, VDhueAmbilight[i]);\n        fibaro:call(VDlightID[i], \"setSlider\", VDsaturationSlider, VDsatAmbilight[i]);\n      end\n      if (tonumber(fibaro:getValue(VDlightID[i], customBriSlider)) ~= Vdim) then\n        fibaro:call(VDlightID[i], \"setSlider\", VDbrightnessSlider, Vdim);\n        check = true;\n      end\n      if VDrefreshType[i] == \"B\" then\n        fibaro:call(VDlightID[i], \"pressButton\", VDrefreshButton);\n      end\n    end\n  else\n    if dimOffAmbilight == \"Yes\" then\n      fibaro:call(VDlightID[i], \"changeHue\", VDhueAmbilight[i]);\n      fibaro:call(VDlightID[i], \"changeSaturation\", VDsatAmbilight[i]);\n    end\n    if Vdim ~= 0 then\n      if (tonumber(fibaro:getValue(VDlightID[i], \"ui.brightness.value\")) ~= Vdim) then\n        fibaro:call(VDlightID[i], \"changeBrightness\", Vdim);\n        check = true;\n      end\n    else\n      if (tonumber(fibaro:getValue(VDlightID[i], \"on\")) == 1) then\n        fibaro:call(VDlightID[i], \"turnOff\");\n        check = true;\n      end\n    end\n  end\n    if lightdebug and check then logbug(\"yellow\", \"This HUE light status changed\") end;\n  return check\nend\n\n-- function that dims low or turns off dimmer lights\nfunction turnOnOffDIMlight(i, Ddim)\n  local check = false;\n  if lightdebug then logbug(\"yellow\", \"DIMMER light: \"..\n                            fibaro:getName(DIMlightID[i])..\" dim set to \"..Ddim) end;\n  if Ddim == 0 then\n    if (tonumber(fibaro:getValue(DIMlightID[i], \"value\")) > 0 ) then\n      fibaro:call(DIMlightID[i], \"turnOff\");\n      check = true;\n    end\n  else\n    if (fibaro:getValue(DIMlightID[i], \"value\") ~= Ddim) then\n      fibaro:call(DIMlightID[i], \"setValue\", Ddim);\n      check = true;\n    end\n  end\n  if lightdebug and check then logbug(\"yellow\", \"This DIMMER light status changed\") end;\n  return check\nend\n\n-- function that dims low or turns off RGBW lights\nfunction turnOffRGBWlight(i, Rdim)\n  local check = false;\n  if lightdebug then logbug(\"yellow\", \"RGBW light: \"..fibaro:getName(RGBWlightID[i])..\n                            \" dim set to \"..Rdim) end;\n  if Rdim == 0 then\n    if (tonumber(fibaro:getValue(RGBWlightID[i], \"currentProgramID\")) > 0 ) then\n      fibaro:call(RGBWlightID[i], \"turnOff\");\n      check = true;\n    else\n      if (tonumber(fibaro:getValue(RGBWlightID[i], \"value\")) > 0 ) then\n        fibaro:call(RGBWlightID[i], \"turnOff\");\n        check = true;\n      end\n    end\n  else\n    if ((useRGBWprograms[i] == \"Yes\") and (dimRGBprogram[i] == \"Yes\") and\n       ((RGBWprogramTime[i] == \"\") or (RGBWprogramTime[i] == timeOfDayCurrent))) then\n      if (tonumber(fibaro:getValue(RGBWlightID[i], \"currentProgramID\")) ~= (RGBWfavorite[i][currentwday])) then\n        if lightdebug then logbug(\"yellow\", \"Starting program: \"..RGBWfavorite[i][currentwday]) end;\n        fibaro:call(RGBWlightID[i], \"startProgram\", RGBWfavorite[i][currentwday]);\n        check = true;\n      end\n    elseif ((useRGBWcolor[i] == \"Yes\") and (dimRGBcolor[i] == \"Yes\")) then\n      if lightdebug then logbug(\"yellow\", \"Setting color to R=\"..RGBWcolor[i].R..\n                                                          \" G=\"..RGBWcolor[i].G..\n                                                          \" B=\"..RGBWcolor[i].B..\n                                                          \" W=\"..RGBWcolor[i].W) end;\n      fibaro:call(RGBWlightID[i], \"setColor\", RGBWcolor[i].R, RGBWcolor[i].G, RGBWcolor[i].B, RGBWcolor[i].W);\n      fibaro:sleep(100);\n      if (tonumber(fibaro:getValue(RGBWlightID[i], \"value\")) ~= Rdim ) then\n        fibaro:call(RGBWlightID[i], \"setValue\", Rdim);\n        check = true;\n      end\n    else\n      if (fibaro:getValue(RGBWlightID[i], \"value\") ~= Rdim ) then\n        if lightdebug then logbug(\"yellow\", \"Setting brightness at current color\") end;\n        fibaro:call(RGBWlightID[i], \"setValue\", Rdim);\n        check = true;\n      end\n    end\n  end\n  if lightdebug and check then logbug(\"yellow\", \"This RGBW light status changed\") end;\n  return check\nend\n\n-- function that turns off switch lights\nfunction turnOnOffSWTlight(i, Sval)\n  local check = false;\n  if lightdebug then logbug(\"yellow\", \"SWITCH light: \"..\n                            fibaro:getName(SWTlightID[i])..\" value set to \"..Sval) end;\n  if Sval ~= 0 then\n    if (tonumber(fibaro:getValue(SWTlightID[i], \"value\")) == 0 ) then\n      fibaro:call(SWTlightID[i], \"turnOn\");\n      check = true;\n    end\n  else\n    if (tonumber(fibaro:getValue(SWTlightID[i], \"value\")) > 0 ) then\n      fibaro:call(SWTlightID[i], \"turnOff\");\n      check = true;\n    end\n  end\n  if lightdebug and check then logbug(\"yellow\", \"This SWITCH light status changed\") end;\n  return check\nend\n\n-- turn off lights in sequence VD, DIMMER, RGBW, SWITCH(RELAY/PLUG)\nfunction turnOffLights(VDdim, DIMdim, RGBdim, SWTval)\n  local turnOff = false;\n  local dimmOff = false;\n  local check   = false;\n  local result  = false\n  if #VDlightID > 0 then\n    if ((dimOffAmbilight == \"Yes\") and (keepAmbilight == \"Yes\")) then\n      getAmbilight();\n    end\n    if checkUserSettings(1, VDdim) then\n      if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n        for i = 1, #VDlightID do\n          if VDdim[i] ~= 0 then dimmOff = true else turnOff = true end;\n          result = turnOffVDlight(i, VDdim[i]);\n          if result then check = true end;\n        end\n      else\n        if (#VDlightID == #VDholidayFlag) then\n          for i = 1, #VDlightID do\n            if VDholidayFlag[i] == 0 then\n              if VDdim[i] ~= 0 then dimmOff = true else turnOff = true end;\n              result = turnOffVDlight(i, VDdim[i]);\n              if result then check = true end;\n            end\n          end\n        else\n          logbug (\"red\", \"ERROR! VD lights holiday flag is missing. Please correct settings.\");\n          errFlag = true;\n        end\n      end\n    else\n      errFlag = true;\n    end\n  end\n  if #DIMlightID > 0 then\n    if checkUserSettings(2, DIMdim) then\n      if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n        for i = 1, #DIMlightID do\n          if DIMdim[i] ~= 0 then dimmOff = true else turnOff = true end;\n          result = turnOnOffDIMlight(i, DIMdim[i]);\n          if result then check = true end;\n        end\n      else\n        if (#DIMlightID == #DIMholidayFlag) then\n          for i = 1, #DIMlightID do\n            if DIMholidayFlag[i] == 0 then\n              if DIMdim[i] ~= 0 then dimmOff = true else turnOff = true end;\n              result = turnOnOffDIMlight(i, DIMdim[i]);\n              if result then check = true end;\n            end\n          end\n        else\n          logbug (\"red\", \"ERROR! DIMMER off lights holiday flag is missing. Please correct settings.\");\n          errFlag = true;\n        end\n      end\n    else\n      errFlag = true;\n    end\n  end\n  if #RGBWlightID > 0 then\n    if checkUserSettings(3, RGBdim) then\n      if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n        for i = 1, #RGBWlightID do\n          if RGBdim[i] ~= 0 then dimmOff = true else turnOff = true end;\n          result = turnOffRGBWlight(i, RGBdim[i]);\n          if result then check = true end;\n        end\n      else\n        if (#RGBWlightID == #RGBWholidayFlag) then\n          for i = 1, #RGBWlightID do\n            if RGBWholidayFlag[i] == 0 then\n              if RGBdim[i] ~= 0 then dimmOff = true else turnOff = true end;\n              result = turnOffRGBWlight(i, RGBdim[i]);\n              if result then check = true end;\n            end\n          end\n        else\n          logbug (\"red\", \"ERROR! RGBW lights holiday flag is missing. Please correct settings.\");\n          errFlag = true;\n        end\n      end\n    else\n      errFlag = true;\n    end\n  end\n  if #SWTlightID > 0 then\n    if checkUserSettings(4, SWTval) then\n      if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n        for i = 1, #SWTlightID do\n          if SWTval[i] == 0 then turnOff = true end;\n          result = turnOnOffSWTlight(i, SWTval[i]);\n          if result then check = true end;\n        end\n      else\n        if (#SWTlightID == #SWTholidayFlag) then\n          for i = 1, #SWTlightID do\n            if SWTholidayFlag[i] == 0 then\n              if SWTval[i] == 0 then turnOff = true end;\n              result = turnOnOffSWTlight(i, SWTval[i]);\n              if result then check = true end;\n            end\n          end\n        else\n          logbug (\"red\", \"ERROR! SWITCH lights holiday flag is missing. Please correct settings.\");\n          errFlag = true;\n        end\n      end\n    else\n      errFlag = true;\n    end\n  end\n  if check then\n    if dimmOff then\n      if deBug then logbug(\"lightgreen\", \"Dimming lights to low\") end;\n    else\n      if deBug then logbug(\"lightgreen\", \"Turning lights Off\") end;\n    end\n  else\n    if dimmOff then\n      if deBug then logbug(\"lightgreen\", \"No action, lights are already dimmed\") end;\n    else\n      if deBug then logbug(\"lightgreen\", \"No action, lights are already off\") end;\n    end\n  end\nend\n\n-- function to turn on VD lights\nfunction turnOnVDlight(i, Vdim)\n  local check = false;\n  if lightdebug then logbug(\"yellow\", VDlightIDtype[i]..\" - HUE light: \"..\n                            fibaro:getName(VDlightID[i])..\" brightness set to \"..Vdim) end;\n  if ((VDlightIDtype[i] == \"VDHcol\") or (VDlightIDtype[i] == \"VDHwha\") or (VDlightIDtype[i] == \"VDHwbr\")) then\n    if ( tonumber(fibaro:getValue(VDlightID[i], \"ui.sldBrightness.value\")) ~= Vdim ) then\n      fibaro:call(VDlightID[i], \"setSlider\", \"2\", Vdim);\n      check = true;\n      if keepAmbilight == \"No\" then\n        if VDlightIDtype[i] == \"VDHcol\" then\n          fibaro:call(VDlightID[i], \"setSlider\", \"3\", VDdefaultColor);\n          fibaro:call(VDlightID[i], \"setSlider\", \"4\", VDdefaultSaturation);\n        elseif VDlightIDtype[i] == \"VDHwha\" then\n          fibaro:call(VDlightID[i], \"setSlider\", \"2\", VDdefaultColorTemp);\n        end\n      end\n    end\n    if VDrefreshType[i] == \"B\" then\n      if VDlightIDtype[i] == \"VDHcol\" then\n        fibaro:call(VDlightID[i], \"pressButton\", \"5\");\n      elseif VDlightIDtype[i] == \"VDHwha\" then\n        fibaro:call(VDlightID[i], \"pressButton\", \"4\");\n      else\n        fibaro:call(VDlightID[i], \"pressButton\", \"3\");\n      end\n    end\n  elseif VDlightIDtype[i] == \"VDHcst\" then\n    if checkCustomVD() then\n      if ( tonumber(fibaro:getValue(VDlightID[i], customBriSlider)) ~= Vdim ) then\n        fibaro:call(VDlightID[i], \"setSlider\", VDbrightnessSlider, Vdim);\n        check = true;\n        if keepAmbilight == \"No\" then\n          fibaro:call(VDlightID[i], \"setSlider\", VDcolorSlider, VDdefaultColor);\n          fibaro:call(VDlightID[i], \"setSlider\", VDsaturationSlider, VDdefaultSaturation);\n        end\n      end\n      if VDrefreshType[i] == \"B\" then\n        fibaro:call(VDlightID[i], \"pressButton\", VDrefreshButton);\n      end\n    end\n  elseif VDlightIDtype[i] == \"PlugIn\" then\n    if (tonumber(fibaro:getValue(VDlightID[i], \"ui.brightness.value\")) ~= Vdim) then\n      fibaro:call(VDlightID[i], \"changeBrightness\", Vdim);\n      check = true;\n      if keepAmbilight == \"No\" then\n        fibaro:call(VDlightID[i], \"changeHue\", VDdefaultColor);\n        fibaro:call(VDlightID[i], \"changeSaturation\", VDdefaultSaturation);\n        fibaro:call(VDlightID[i], \"changeContrast\", VDdefaultColorTemp);\n      end\n    end\n    if (tonumber(fibaro:getValue(VDlightID[i], \"on\")) == 0) then\n      fibaro:call(VDlightID[i], \"turnOn\");\n    end\n  else\n    logbug(\"red\", \"ERROR! Philips HUE VD type definition is missing! Please check!\");\n  end\n  if lightdebug and check then logbug(\"yellow\", \"This HUE light status changed\") end;\n  return check\nend\n\n-- function to turn on RGBW lights\nfunction turnOnRGBWlight(i, Rdim)\n  local check = false;\n  if ((useRGBWprograms[i] == \"Yes\") and (Rdim > 0) and\n    ((RGBWprogramTime[i] == \"\") or (RGBWprogramTime[i] == timeOfDayCurrent))) then\n    if (#RGBWfavorite[i] == 7) then\n      if lightdebug then logbug(\"yellow\", \"RGBW light: \"..fibaro:getName(RGBWlightID[i])..\n                                \" program set to \"..RGBWfavorite[i][currentwday]) end;\n      if (tonumber(fibaro:getValue(RGBWlightID[i], \"currentProgramID\")) ~= (RGBWfavorite[i][currentwday])) then\n        fibaro:call(RGBWlightID[i], \"startProgram\", RGBWfavorite[i][currentwday]);\n        check = true;\n      end\n    else\n      logbug (\"red\", \"ERROR! RGBW lights weekly program setting invalid. Please correct settings.\");\n      errFlag = true;\n    end\n  elseif ((useRGBWcolor[i] == \"Yes\") and (Rdim > 0)) then\n    if lightdebug then logbug(\"yellow\", \"RGBW light: \"..fibaro:getName(RGBWlightID[i])..\n                              \" color set to R=\"..RGBWcolor[i].R..\n                                           \" G=\"..RGBWcolor[i].G..\n                                           \" B=\"..RGBWcolor[i].B..\n                                           \" W=\"..RGBWcolor[i].W) end;\n    fibaro:call(RGBWlightID[i], \"setColor\", RGBWcolor[i].R, RGBWcolor[i].G, RGBWcolor[i].B, RGBWcolor[i].W);\n    fibaro:sleep(100);\n    fibaro:call(RGBWlightID[i], \"setValue\", Rdim);\n    check = true;\n  elseif Rdim > 0 then\n    if lightdebug then logbug(\"yellow\", \"RGBW light: \"..fibaro:getName(RGBWlightID[i])..\n                              \" brightness set to \"..Rdim) end;\n    if (tonumber(fibaro:getValue(RGBWlightID[i], \"value\")) ~= Rdim) then\n      fibaro:call(RGBWlightID[i], \"setValue\", Rdim);\n      check = true;\n    end\n  else\n    fibaro:call(RGBWlightID[i], \"turnOff\");\n  end\n  if lightdebug and check then logbug(\"yellow\", \"This RGBW light status changed\") end;\n  return check\nend\n\n-- turn on lights in sequence VD, DIMMER, RGBW, SWITCH(RELAY/PLUG)\nfunction turnOnLights(VDdim, DIMdim, RGBdim, SWTval)\n  local result = false;\n  local check  = false;\n  if #VDlightID > 0 then\n    if dimOffAmbilight == \"Yes\" then getAmbilight() end;\n    if checkUserSettings(1, VDdim) then\n      if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n        for i = 1, #VDlightID do\n          result = turnOnVDlight(i, VDdim[i]);\n          if result then check = true end;\n        end\n      else\n        if (#VDlightID == #VDholidayFlag) then\n          for i = 1, #VDlightID do\n            if VDholidayFlag[i] == 0 then\n              result = turnOnVDlight(i, VDdim[i]);\n              if result then check = true end;\n            end\n          end\n        else\n          logbug (\"red\", \"ERROR! VD lights holiday flag is missing. Please correct settings.\");\n          errFlag = true;\n        end\n      end\n    else\n      errFlag = true;\n    end\n  end\n  if #DIMlightID > 0 then\n    if checkUserSettings(2, DIMdim) then\n    if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n      for i = 1, #DIMlightID do\n        result = turnOnOffDIMlight(i, DIMdim[i]);\n        if result then check = true end;\n      end\n    else\n      if (#DIMlightID == #DIMholidayFlag) then\n        for i = 1, #DIMlightID do\n          if DIMholidayFlag[i] == 0 then\n            result = turnOnOffDIMlight(i, DIMdim[i]);\n            if result then check = true end;\n          end\n        end\n      else\n        logbug (\"red\", \"ERROR! Dimmer on lights holiday flag is missing. Please correct settings.\");\n        errFlag = true;\n      end\n    end\n    else\n      errFlag = true;\n    end\n  end\n  if #RGBWlightID > 0 then\n    if checkUserSettings(3, RGBdim) then\n      if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n        for i = 1, #RGBWlightID do\n          result = turnOnRGBWlight(i, RGBdim[i]);\n          if result then check = true end;\n        end\n      else\n        if (#RGBWlightID == #RGBWholidayFlag) then\n          for i = 1, #RGBWlightID do\n            if RGBWholidayFlag[i] == 0 then\n              result = turnOnRGBWlight(i, RGBdim[i]);\n              if result then check = true end;\n          end\n          end\n        else\n          logbug (\"red\", \"ERROR! RGBW lights holiday flag is missing. Please correct settings.\");\n          errFlag = true;\n        end\n      end\n    else\n      errFlag = true;\n    end\n  end\n  if #SWTlightID > 0 then\n    if checkUserSettings(4, SWTval) then\n      if ((useholidayLights == \"No\") or (fibaro:getGlobalValue(holidayLights) == holidayLightsMapping.Off)) then\n        for i = 1, #SWTlightID do\n          result = turnOnOffSWTlight(i, SWTval[i]);\n          if result then check = true end;\n        end\n      else\n        if (#SWTlightID == #SWTholidayFlag) then\n          for i = 1, #SWTlightID do\n            if SWTholidayFlag[i] == 0 then\n              result = turnOnOffSWTlight(i, SWTval[i]);\n              if result then check = true end;\n            end\n          end\n        else\n          logbug (\"red\", \"ERROR! SWITCH lights holiday flag is missing. Please correct settings.\");\n          errFlag = true;\n        end\n      end\n    else\n      errFlag = true;\n    end\n  end\n  if check then\n    if deBug then logbug(\"lightgreen\", \"Turning lights On or changing brightness.\") end;\n  else\n    if deBug then logbug(\"lightgreen\", \"Lights are already On.\") end;\n  end\nend\n\n-- after using holiday lights reset HUE lamps to default color\nfunction resetVDColors(VDbright, VDcolor, VDsat, VDct)\n  if deBug then logbug(\"yellow\", \"Reseting HUE color to default settings\") end;\n  if #VDlightID > 0 then\n    for i = 1, #VDlightID do\n      if ((VDlightIDtype[i] == \"VDHcol\") or (VDlightIDtype == \"VDHwha\") or (VDlightIDtype == \"VDHwbr\")) then\n        if ( tonumber(fibaro:getValue(VDlightID[i], \"ui.sldBrightness.value\")) ~= VDbright[i] ) then\n          fibaro:call(VDlightID[i], \"setSlider\", \"2\", VDbright[i]);\n        end\n        if VDlightIDtype[i] == \"VDHcol\" then\n          fibaro:call(VDlightID[i], \"setSlider\", \"3\", VDcolor);\n          fibaro:call(VDlightID[i], \"setSlider\", \"4\", VDsat);\n        elseif VDlightIDtype[i] == \"VDHwha\" then\n          fibaro:call(VDlightID[i], \"setSlider\", \"3\", VDct);\n        end\n        if VDrefreshType[i] == \"B\" then\n          if VDlightIDtype[i] == \"VDHcol\" then\n            fibaro:call(VDlightID[i], \"pressButton\", \"5\");\n          elseif VDlightIDtype[i] == \"VDHwha\" then\n            fibaro:call(VDlightID[i], \"pressButton\", \"4\");\n          else\n            fibaro:call(VDlightID[i], \"pressButton\", \"3\");\n          end\n        end\n      elseif VDlightIDtype[i] == \"VDHcst\" then\n        if checkCustomVD() then\n          if ( tonumber(fibaro:getValue(VDlightID[i], customBriSlider)) ~= VDbright[i] ) then\n            fibaro:call(VDlightID[i], \"setSlider\", VDbrightnessSlider, VDbright[i]);\n          end\n          fibaro:call(VDlightID[i], \"setSlider\", VDcolorSlider, VDcolor);\n          fibaro:call(VDlightID[i], \"setSlider\", VDsaturationSlider, VDsat);\n          if VDrefreshType[i] == \"B\" then\n            fibaro:call(VDlightID[i], \"pressButton\", VDrefreshButton);\n          end\n        end\n      elseif VDlightIDtype[i] == \"PlugIn\" then\n        if (fibaro:getValue(VDlightID[i], \"ui.brightness.value\") ~= VDbright[i]) then\n          fibaro:call(VDlightID[i], \"changeBrightness\", VDbright[i]);\n        end\n        fibaro:call(VDlightID[i], \"changeSaturation\", VDsat);\n        -- FIXED: theoV\n        fibaro:call(VDlightID[i], \"changeContrast\", VDct);\n        fibaro:call(VDlightID[i], \"changeHue\", VDcolor);\n        fibaro:call(VDlightID[i], \"turnOn\");\n      end\n    end\n  end\nend\n\n-- check motion sensors and global variables for motion\nfunction checkMotion()\n  local motion = false;\n  if (StartSource['type'] == 'property') then\n    for i = 1, #motionID do\n      if tonumber(fibaro:getValue(motionID[i], 'value')) > 0 then\n        motion = true;\n      end\n    end\n  elseif (StartSource['type'] == 'global') then\n    if ((useGlobalMotion == \"Yes\") and (#globalMotionID > 0)) then\n      for i = 1, #globalMotionID do\n        if fibaro:getGlobalValue(globalMotionID[i]) == globalMotionValue then\n          motion = true;\n        end\n      end\n    elseif (StartSource['name'] == timeOfDay) then\n      motion = false;\n    elseif StartSource['name'] == sleepingName then\n      if sleepingName ~= \"\" then\n        if fibaro:getGlobalValue(sleepingName) == sleepingMapping.No then\n          for i = 1, #motionID do\n            if (tonumber(fibaro:getValue(motionID[i], 'value')) > 0) then\n              motion = true;\n            end\n          end\n        end\n      end\n    elseif StartSource['name'] == presentState then\n      if fibaro:getGlobalValue(presentState) ~= presentStateMapping.Away then \n        for i = 1, #motionID do\n          if (tonumber(fibaro:getValue(motionID[i], 'value')) > 0) then\n            motion = true;\n          end\n        end\n      end\n    end\n  end\n  return motion\nend\n\n-- check light sensors and calculate averige light level\nfunction checkLux()\n  local totalLux   = 0;\n  local averigeLux = 0;\n  if #luxID > 0 then\n    for i = 1, #luxID do\n      totalLux = totalLux + tonumber(fibaro:getValue(luxID[i], 'value'));\n    end\n    averigeLux = math.floor(totalLux / #luxID);\n  else\n    averigeLux = 50;\n  end\n  return averigeLux;\nend\n\n-- Function that checks conditions to dim or turn off lights\nfunction dimOffLights()\n  luxMeas = checkLux();\n  if luxMeas < luxMax then\n    if dimOff and useDimLow and (presentStateCurrent ~= presentStateMapping.Away) and (sleepingCurrent == sleepingMapping.No) then\n      if deBug then logbug(\"orange\", \"dimOff = true and useDimLow = true and presentState ~= Away and sleeping = No\") end;\n      if sleepStateCurrent == sleepStateMapping.Awake then\n        if deBug then logbug(\"orange\", \"sleepState = Awake, dimming lights low\") end;\n        turnOffLights(dimVDlow, dimDIMlow, dimRGBlow, valSWTlow);\n      elseif keepDimSleep then\n        if deBug then logbug(\"orange\", \"sleepState = Sleep; keepDimSleep = true, dimming lights low\") end;\n        turnOffLights(dimVDlow, dimDIMlow, dimRGBlow, valSWTlow);\n      else\n        if deBug then logbug(\"orange\", \"sleepState = Sleep; keepDimSleep = false, turn lights Off\") end;\n        turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n      end\n    else\n      if deBug then logbug(\"orange\", \"dimOff = false or useDimLow = false or present = Away or sleeping = Yes, turn lights Off\") end;\n      turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n    end\n  else\n    if deBug then logbug (\"orange\", \"dimOff and useDimLow = true but Current lux: \"..\n                          luxMeas..\" >= luxMax: \"..luxMax..\" keep lights Off\") end;\n        turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n  end\nend\n\n-- function to calculate time by adding hours and minutes (positive or negative)\nfunction calculateTime(baseTime, diffHour, diffMinute)\n    local origHour, origMinute = string.match(baseTime, \"(%d+):(%d+)\");\n    local newMinute = (origMinute + diffMinute) % 60\n    local excessHour = math.floor((origMinute + diffMinute) / 60)\n    local newHour = (origHour + diffHour + excessHour) % 24\n    return string.format(\"%02d:%02d\", newHour, newMinute)\nend\n\n-- function to calculate time by adding or subrtracting a time (HH:MM)\nfunction calculateTimeString(baseTime, duration, operand)\n    local diffHour, diffMinute = string.match(duration, \"(%d+):(%d+)\");\n     if operand == \"subtract\" then\n        diffHour = 0 - diffHour;\n        diffMinute = 0 - diffMinute;\n    end\n    return calculateTime(baseTime, diffHour, diffMinute)\nend\n\n-- function checks condition of extra timers and if found match keeps ligts On\nfunction checkExtraTimer()\n  local check = false;\n  if extraTimerEnable then\n    if fibaro:getGlobalValue(timerStatus) ~= timerStatusMapping.Off then\n      local currentTime  = os.date(\"%H:%M\", os.time());\n      if #timerStartTimeName > 0 then\n        if ((#timerStartTimeName == #timerDurationTime) and\n            (#timerStartTimeName == #timerCheckName) and\n            (#timerStartTimeName == #timerCheckValue)) then\n            for i = 1, #timerStartTimeName do\n              if fibaro:getGlobalValue(timerCheckName[i]) == timerCheckValue[i] then\n                if ((timerCheckValue[i] == timerValueMapping.Weekdays)  and (currentwday >= 2 and currentwday <= 6)) or\n                   ((timerCheckValue[i] == timerValueMapping.Weekends)  and (currentwday == 1 or  currentwday == 7)) or\n                   ((timerCheckValue[i] == timerValueMapping.Monday)    and (currentwday == 2)) or\n                   ((timerCheckValue[i] == timerValueMapping.Tuesday)   and (currentwday == 3)) or\n                   ((timerCheckValue[i] == timerValueMapping.Wednesday) and (currentwday == 4)) or\n                   ((timerCheckValue[i] == timerValueMapping.Thursday)  and (currentwday == 5)) or\n                   ((timerCheckValue[i] == timerValueMapping.Friday)    and (currentwday == 6)) or\n                   ((timerCheckValue[i] == timerValueMapping.Saturday)  and (currentwday == 7)) or\n                   ((timerCheckValue[i] == timerValueMapping.Sunday)    and (currentwday == 1)) then\n                   local startTime    = fibaro:getGlobalValue(timerStartTimeName[i]);\n                   local duration     = timerDurationTime[i];\n                   local endTime      = calculateTimeString(startTime, duration, \"add\");\n                   if currentTime >= startTime and currentTime <= endTime then\n                     if deBug and chFlag then logbug(\"yellow\", \"Timer : \"..timerStartTimeName[i]..\n                                                     \" - Current: \"..currentTime..\", Start: \"..startTime..\n                                                     \", Duration: \"..duration..\", End: \"..endTime) end;\n                     check = true;\n                   end\n                end\n              end\n            end\n        else\n          logbug(\"red\", \"ERROR! Extra timer settings invalid! Please check settings!\");\n          errFlag = true;\n        end\n      end\n    end\n  end\n  if check then chFlag = false end;\n  return check\nend\n\n-- function checks condition of extra devices and globals and if found match keep ligts On\nfunction checkExtraCondition()\n  local extraCondition = false;\n  if ((sleepStateCurrent == sleepStateMapping.Awake) or extraDeviceSleep) then\n    if #extraDeviceID > 0 then\n      for i = 1, #extraDeviceID do\n        if tonumber(fibaro:getValue(extraDeviceID[i], \"value\")) == extraDeviceValue[i] then\n          if deBug and exFlag then logbug(\"lightblue\", \"Device: \"..fibaro:getName(extraDeviceID[i])..\n                                          \" has value \".. extraDeviceValue[i]..\n                                          \" and will keep lights On\") end;\n          extraCondition = true;\n        end\n      end\n    end\n  end\n  if ((sleepStateCurrent == sleepStateMapping.Awake) or extraPowerSleep) then\n    if #extraPowerID > 0 then\n      for i = 1, #extraPowerID do\n        if tonumber(fibaro:getValue(extraPowerID[i], \"power\")) > setPower[i] then\n          if deBug and exFlag then logbug(\"lightblue\", \"Device: \"..fibaro:getName(extraPowerID[i])..\n                                          \" power: \"..fibaro:getValue(extraPowerID[i], \"power\")..\n                                          \"W is greater than \"..setPower[i]..\"W and will keep lights On\") end;\n          extraCondition = true\n        end\n      end\n    end\n  end\n  if ((sleepStateCurrent == sleepStateMapping.Awake) or extraGlobalSleep) then\n    if #extraGlobalName > 0 then\n      for i = 1, #extraGlobalName do\n        if fibaro:getGlobalValue(extraGlobalName[i]) == extraGlobalValue[i] then\n          if deBug and exFlag then logbug(\"lightblue\", \"Global variable: \"..extraGlobalName[i]..\n                                          \" value is equal to: \"..extraGlobalValue[i]..\n                                          \" and will keep lights On\") end\n          extraCondition = true;\n        end\n      end\n    end\n  end\n  if extraCondition then exFlag = false end;\n  return extraCondition\nend\n\n-- check extra devices to be started\nfunction checkExDevices()\n  if #exDeviceID > 0 then\n    if ((#exDeviceID == #exDeviceTime) and (#exDeviceID == #exDeviceValue)) then\n      for i = 1, #exDeviceID do\n        if exDeviceTime[i] == exTimer then\n          if exDeviceValue[i] == 400 then\n            fibaro:call(exDeviceID[i], \"turnOn\");\n            if deBug then logbug(\"brown\", \"turn On: \"..fibaro:getRoomNameByDeviceID(exDeviceID[i])..\n                                 \" \"..fibaro:getName(exDeviceID[i])) end;\n          elseif exDeviceValue[i] == 0 then    \n            fibaro:call(exDeviceID[i], \"turnOff\");\n            if deBug then logbug(\"brown\", \"turn Off: \"..fibaro:getRoomNameByDeviceID(exDeviceID[i])..\n                                 \" \"..fibaro:getName(exDeviceID[i])) end;\n          elseif ((exDeviceValue[i] > 0) and (exDeviceValue[i] <= 100)) then\n            fibaro:call(exDeviceID[i], \"setValue\", exDeviceValue[i]);\n            if deBug then logbug(\"brown\", \"setValue to: \"..tostring(exDeviceValue[i])..\n                                 \" on \"..fibaro:getRoomNameByDeviceID(exDeviceID[i])..\n                                 \" \"..fibaro:getName(exDeviceID[i])) end;\n          elseif ((exDeviceValue[i] >= -100) and (exDeviceValue[i] < 0)) then\n            fibaro:call(exDeviceID[i], \"setValue\", math.abs(exDeviceValue[i]));\n            fibaro:sleep(100);\n            fibaro:call(exDeviceID[i], \"turnOn\");\n            if deBug then logbug(\"brown\", \"setValue to: \"..tostring(math.abs(exDeviceValue[i]))..\n                                 \" on \"..fibaro:getRoomNameByDeviceID(exDeviceID[i])..\n                                 \" \"..fibaro:getName(exDeviceID[i])) end;\n          else\n            logbug(\"red\", \"ERROR! No device turned on because value is out of range. Please correct.\");\n            errFlag = true;\n          end\n        end\n      end\n    else\n      logbug(\"red\", \"ERROR! Check ACTIVATE DEVICE setup because time or value is missing!\");\n      errFlag = true;\n    end\n  end\n  if #exVDeviceID > 0 then\n    if ((#exVDeviceID == #exVDeviceTime) and (#exVDeviceID == #exVDeviceButton)) then\n      for i = 1, #exVDeviceID do\n        if exVDeviceTime[i] == exTimer then\n          fibaro:call(exVDeviceID[i], \"pressButton\", exVDeviceButton[i]);\n          if deBug then logbug(\"brown\", \"On virtual device: \"..fibaro:getName(exVDeviceID[i])..\n                               \" pressed button \"..exVDeviceButton[i]) end;\n        end\n      end\n    else\n      logbug(\"red\", \"ERROR! Check ACTIVATE VD setup because time or button is missing!\");\n      errFlag = true;\n    end\n  end\n  if #exSceneID > 0 then\n    if (#exSceneID == #exSceneTime) then\n      for i = 1, #exSceneID do\n        if exSceneTime[i] == exTimer then\n          fibaro:startScene(exSceneID[i]);\n          if deBug then logbug(\"brown\", \"Started scene ID: \"..exSceneID[i]) end;\n        end\n      end\n    else\n      logbug(\"red\", \"ERROR! Check ACTIVATE SCENE setup because time is missing!\");\n      errFlag = true;\n    end\n  end\n  if #exGlobal > 0 then\n    if ((#exGlobal == #exGlobalTime) and (#exGlobal == #exGlobalValue)) then\n      for i = 1, #exGlobal do\n        if exGlobalTime[i] == exTimer then\n          fibaro:setGlobal(exGlobal[i], exGlobalValue[i]);\n          if deBug then logbug(\"brown\", \"Global var: \"..exGlobal[i]..\" changed value to \"..exGlobalValue[i]) end;\n        end\n      end\n    else\n      logbug(\"red\", \"ERROR! Check CHANGE GLOBAL VARIABLE setup because time or value is missing!\");\n      errFlag = true;\n    end\n  end\nend\n\n-- check status of the lights and if turned off stop the scene when no motion detected - customBriSlider\nfunction checkLights()\n  local check = false;\n  if (motion == false and checkLightOff) then\n    if #VDlightID > 0 then\n      if #VDlightID == #dimVD then\n        for i = 1, #VDlightID do\n          if VDlightIDtype[i] == \"VDHcol\" or VDlightIDtype[i] == \"VDHwha\" or VDlightIDtype[i] == \"VDHwbr\" then\n            if ((tonumber(fibaro:getValue(VDlightID[i], \"ui.sldBrightness.value\")) == 0) and (dimVD[i] > 0)) then\n              if deBug then logbug(\"grey\", \"VD HUE light is turned off!\") end\n              check = true;\n            end\n          elseif VDlightIDtype[i] == \"VDHcst\" then\n            if ((tonumber(fibaro:getValue(VDlightID[i], customBriSlider)) == 0) and (dimVD[i] > 0)) then\n              if deBug then logbug(\"grey\", \"Custom VD HUE light is turned off!\") end\n              check = true;\n            end\n          elseif VDlightIDtype[i] == \"PlugIn\" then\n            if ((tonumber(fibaro:getValue(VDlightID[i], \"on\")) == 0) and (dimVD[i] > 0)) then\n              if deBug then logbug(\"grey\", \"HUE plugin light is turned off!\") end\n              check = true;\n            end\n          end\n        end\n      else\n        logbug(\"red\", \"ERROR! One of VD lights missing Brightness setting. Please check.\");\n      end\n    end\n    if #DIMlightID > 0 then\n      if #DIMlightID == #dimDIM then\n        for i = 1, #DIMlightID do\n          if ((tonumber(fibaro:getValue(DIMlightID[i], \"value\")) == 0) and (dimDIM[i] > 0)) then\n            if deBug then logbug(\"grey\", \"DIMlight is turned off!\") end\n            check = true;\n          end\n        end\n      else\n        logbug(\"red\", \"ERROR! One of dimmer lights missing Brightness setting. Please check.\");\n      end\n    end\n    if #RGBWlightID > 0 then\n      if #RGBWlightID == #dimRGB then\n        for i = 1, #RGBWlightID do\n          if (tonumber(fibaro:getValue(RGBWlightID[i], \"currentProgramID\")) == 0) then\n            if ((tonumber(fibaro:getValue(RGBWlightID[i], \"value\")) == 0) and (dimRGB[i] > 0)) then\n              if deBug then logbug(\"grey\", \"RGBWlight is turned off!\") end\n              check = true;\n            end\n          end\n        end\n      else\n        logbug(\"red\", \"ERROR! One of RGBW lights missing Brightness setting. Please check.\");\n      end\n    end\n    if #SWTlightID > 0 then\n      if #SWTlightID == #valSWT then\n        for i = 1, #SWTlightID do\n          if ((tonumber(fibaro:getValue(SWTlightID[i], \"value\")) == 0) and (valSWT[i] ~= 0)) then\n            if deBug then logbug(\"grey\", \"SWTlight is turned off!\") end\n            check = true;\n          end\n        end\n      else\n        logbug(\"red\", \"ERROR! One of switch lights missing On/Off setting. Please check.\");\n      end\n    end\n  end\n  if check then\n    if deBug then logbug(\"grey\", \"Lights are turned off so stop scene from running!\") end\n  end\n  return check;\nend\n\n-- function check state of some variables and light levels and if found changed then turns off lights\nfunction checkState()\n  local check = false;\n  if (fibaro:getGlobalValue(presentState) ~= presentStateCurrent) then\n    presentStateCurrent = fibaro:getGlobalValue(presentState);\n    if presentStateCurrent == presentStateMapping.Away then\n      check = true;\n      if deBug then logbug(\"blue\", \"State of \"..presentState..\" is changed to \"..\n                           presentStateCurrent..\", turn lights off & stop scene\") end\n    else\n      if deBug then logbug(\"blue\", \"State of \"..presentState..\" is changed to \"..\n                           presentStateCurrent..\", light state not changed\") end\n    end  \n  end\n  if sleepingName ~= \"\" then\n    if (fibaro:getGlobalValue(sleepingName) ~= sleepingCurrent) then\n      sleepingCurrent = fibaro:getGlobalValue(sleepingName);\n      if fibaro:getGlobalValue(sleepingName) == sleepingMapping.Yes then\n        check = true;\n        if deBug then logbug(\"blue\", \"State of \"..sleepingName..\" is changed to \"..\n                         sleepingCurrent..\", turn lights off & stop scene\") end\n      end\n    end\n  end\n  if (fibaro:getGlobalValue(sleepState) ~= sleepStateCurrent) then\n    if (motion == false) then\n      if deBug then logbug(\"blue\", \"State of \"..sleepState..\" is changed to \"..\n                           fibaro:getGlobalValue(sleepState)..\n                           \" and no motion, turn lights off & stop scene\") end\n      check = true;\n    end\n  end\n  if (fibaro:getGlobalValue(lightState) ~= lightStateCurrent) then\n    lightStateCurrent = fibaro:getGlobalValue(lightState);\n    check = true;\n    if deBug then logbug(\"blue\", \"State of \"..lightState..\" is changed to \"..\n                         lightStateCurrent..\", turn lights off & stop scene\") end\n  end\n  if (checkLux() >= luxMax) then\n    check = true;\n    if deBug then logbug(\"blue\", \"Lux level has changed and is >= than luxMax: \"..luxMax..\n                         \", turn lights off & stop scene\") end\n  end\n  return check;\nend\n\n-- function checks status of selected global variables and if found \n-- changed changes dim level of lights accordingly\nfunction checkLevels()\n  local check = false;\n  if (fibaro:getGlobalValue(sleepState) ~= sleepStateCurrent) then\n    sleepStateCurrent = fibaro:getGlobalValue(sleepState);\n    if motion then\n      if deBug then logbug(\"blue\", \"State of \"..sleepState..\" is changed to \"..\n                           fibaro:getGlobalValue(sleepState)..\n                           \" and motion detected, adjust lights only\") end\n      check = true;\n    end\n  end\n  if ((useholidayLights == \"Yes\") and (fibaro:getGlobalValue(holidayLights) ~= holidayLightsCurrent)) then\n    holidayLightsCurrent = fibaro:getGlobalValue(holidayLights); -- are holiday lights on\n    if deBug then logbug(\"lightgrey\", \"State of \"..holidayLights..\" is changed to \"..\n                         holidayLightsCurrent..\", lights brightness changed\") end\n    if holidayLightsCurrent == holidayLightsMapping.Off then\n      if ((offAmbilight == \"No\") and (dimAmbilight == \"No\")) then\n        resetVDColors(dimVD, VDdefaultColor, VDdefaultSaturation, VDdefaultColorTemp);\n      end\n    end\n    check = true;\n  end\n  if ((useIndoorLights == \"Yes\") and (fibaro:getGlobalValue(indoorLightsDim) ~= indoorLightsCurrent)) then\n    indoorLightsCurrent = fibaro:getGlobalValue(indoorLightsDim); -- or we are in the garden or in house\n    if deBug then logbug(\"lightgrey\", \"State of \"..indoorLightsDim..\" is changed to \"..\n                         indoorLightsCurrent..\", lights brightness changed\") end\n    check = true;\n  end\n  if ((useProjectorState == \"Yes\") and (fibaro:getGlobalValue(projectorState) ~= projectorStateCurrent)) then\n    projectorStateCurrent = fibaro:getGlobalValue(projectorState); -- or we watching TV\n    if deBug then logbug(\"lightgrey\", \"State of \"..projectorState..\" is changed to \"..\n                         projectorStateCurrent..\", lights brightness changed\") end\n    check = true;\n  end\n  if ((useCookingState == \"Yes\") and (fibaro:getGlobalValue(cookingState) ~= cookingStateCurrent)) then\n    cookingStateCurrent = fibaro:getGlobalValue(cookingState); -- or we are cooking\n    if deBug then logbug(\"lightgrey\", \"State of \"..cookingState..\" is changed to \"..\n                         cookingStateCurrent..\", lights brightness changed\") end\n    check = true;\n  end\n  if ((useMealState == \"Yes\") and (fibaro:getGlobalValue(mealState) ~= mealStateCurrent)) then\n    mealStateCurrent = fibaro:getGlobalValue(mealState); -- or we are eating\n    if deBug then logbug(\"lightgrey\", \"State of \"..mealState..\" is changed to \"..\n                         mealStateCurrent..\", lights brightness changed\") end\n    check = true;\n  end\n  if ((useCinemaState == \"Yes\") and (fibaro:getGlobalValue(cinemaState) ~= cinemaStateCurrent)) then\n    cinemaStateCurrent = fibaro:getGlobalValue(cinemaState); -- or we watching TV\n    if deBug then logbug(\"lightgrey\", \"State of \"..cinemaState..\" is changed to \"..\n                         cinemaStateCurrent..\", lights brightness changed\") end\n    check = true;\n  end\n  if ((useGuestState == \"Yes\") and (fibaro:getGlobalValue(guestState) ~= guestStateCurrent)) then\n    guestStateCurrent = fibaro:getGlobalValue(guestState); -- or we have guests\n    if deBug then logbug(\"lightgrey\", \"State of \"..guestState..\" is changed to \"..\n                         guestStateCurrent..\", lights brightness changed\") end\n    check = true;\n  end\n  if ((useTimeOfDay == \"Yes\") and (fibaro:getGlobalValue(timeOfDay) ~= timeOfDayCurrent)) then\n    timeOfDayCurrent = fibaro:getGlobalValue(timeOfDay);\n    if dimOff then\n      dimOffLevels();\n      if deBug then logbug(\"lightgrey\", \"State of \"..timeOfDay..\" is changed to \"..\n                           timeOfDayCurrent..\", lights dimOff level changed\") end\n    end\n    if deBug then logbug(\"lightgrey\", \"State of \"..timeOfDay..\" is changed to \"..\n                         timeOfDayCurrent..\", lights brightness changed\") end\n    check = true;\n  end\n  if sleepingName ~= \"\" then\n    if (fibaro:getGlobalValue(sleepingName) ~= sleepingCurrent) then\n      sleepingCurrent = fibaro:getGlobalValue(sleepingName);\n      if fibaro:getGlobalValue(sleepingName) == sleepingMapping.No then\n        check = true;\n        if deBug then logbug(\"lightgrey\", \"State of \"..sleepingName..\" is changed to \"..\n                         sleepingCurrent..\", turn lights On\") end\n      end\n    end\n  end\n  return check;\nend\n\nfunction endScene()\n  logbug (\"green\", \"STOP - Very Smart Lights scene\");\n  fibaro:abort();\nend\n\n--- MAIN CODE PART ------------------------------------------------------------------------\nlogbug (\"green\", \"START - Very Smart Lights scene version \"..version..\" - (c) 2016 Sankotronic\");\n-- get current state of the global variables\ngetCurrentState();\n-- If triggered by motion sensor or golobal variable then do the thing\nluxMeas = checkLux();\nmotion  = checkMotion();\n-- set dimOff levels if using\nif dimOff and not motion then dimOffLevels() end;\n\n-- MAIN LOOP -------------------------------------------------------------------------------\nif (StartSource['type'] == 'property') or (StartSource['type'] == 'global') then\n  -- execute only when briched and when state change to safe then skip\n  if motion then\n    -- if we are at home or on holidays then turn on lights\n    if (fibaro:getGlobalValue(presentState) ~= presentStateMapping.Away) then\n    -- If lights are in auto mode and light level low or it is dark then turn light on\n    if ((fibaro:getGlobalValue(lightState) == lightStateMapping.Auto) and \n       (sleepingCurrent == sleepingMapping.No) and \n       ((fibaro:getGlobalValue(darkness) == darknessMapping.Dark) or (luxMeas < luxMin))) then\n      if StartSource['type'] == 'property' then\n        if deBug then logbug(\"cyan\", \"Trigger by \"..fibaro:getRoomNameByDeviceID(StartSource['deviceID'])..\n                             \" \"..fibaro:getName(StartSource['deviceID'])..\n                             \". Current lux:\"..luxMeas..\" < luxMin: \"..luxMin..\" turn lights On\") end;\n      else\n        if deBug then logbug(\"cyan\", \"Trigger by global \"..StartSource['name']..\n                             \". Current lux:\"..luxMeas..\" < luxMin: \"..luxMin..\" turn lights On\") end;\n      end\n      adjustLevels();\n      if dimOff then dimOffLevels() end;\n      -- scene main loop\n      while true do\n        -- Check sensors or global variable for movement\n        motion = checkMotion();\n        extraC = checkExtraCondition();\n        extraT = checkExtraTimer();\n        -- if any of sensors triggered or extra condition state is active reset countdown\n        if motion or extraC or extraT then\n          if ((duration - PIRwindowTime) <= 0) then\n            countdown = PIRwindowTime\n            if duration < PIRwindowTime then\n              logbug(\"orange\", \"WARNING! Light duration set shorter than PIRwindowTime = \"..PIRwindowTime..\". Please correct.\");\n            end\n          else    \n            countdown = duration - PIRwindowTime;\n          end\n        end\n        if timerdeBug then \n          if motion then m=\"Yes\" else m=\"No\" end \n          if extraC then c=\"Yes\" else c=\"No\" end\n          if extraT then t=\"Yes\" else t=\"No\" end\n          logbug(\"yellow\", \"motion = \"..m..\" extra cond: \"..c..\n                 \" extra timer: \"..t..\" Countdown = \"..countdown..\" Duration = \"..duration)\n        end\n        -- if some of the states is changed adjust levels or turn off lights\n        chState = checkState();\n        chLevel = checkLevels();\n        if chState then\n          countdown = 0;\n        end;\n        if chLevel then\n          adjustLevels();\n        end;\n        -- if countdown and light is off then turn it on\n        if ( countdown > 0 ) and (chLevel or adjusted) then\n          turnOnLights(dimVD, dimDIM, dimRGB, valSWT);\n          chLevel  = false;\n          adjusted = false;\n          fibaro:sleep(300); -- needed to give devices time to report back proper status!\n        end\n        if countdown > 0 then countdown = countdown - 1 end;\n        -- check extra devices, scenes, globals to be started\n        if timerdeBug then logbug(\"lightgray\", \"exTimer = \"..exTimer) end;\n        checkExDevices();\n        -- exTimer\n        exTimer = exTimer + 1;\n        -- check lights status and if turned off stop scene\n        chLight = checkLights();\n        if chLight then\n          countdown = 0;\n        end;\n        if errFlag then\n          logbug(\"red\", \"There is ERROR in the settings and scene is stopped\");\n          endScene();\n        end\n        -- if countdown is ended and light is on then turn it off\n        if ( countdown == 0 ) then\n          if deBug then logbug(\"cyan\", \"Timer reach 0 seconds\") end;\n          dimOffLights();\n          -- Kill running scene cause it is done with light\n          endScene();\n        end\n        fibaro:sleep(1000);\n      end\n    else\n      -- if motion is breached but lux >= luxMax then turn off light\n      if (fibaro:getGlobalValue(lightState) == lightStateMapping.Auto) then\n        luxMeas = checkLux();\n        if (luxMeas >= luxMax) then\n          if deBug then logbug(\"cyan\", \"Trigger by \"..fibaro:getRoomNameByDeviceID(StartSource['deviceID'])..\n                               \" \"..fibaro:getName(StartSource['deviceID'])..\n                               \". Current lux:\"..luxMeas..\" >= luxMax: \"..luxMax..\" turn lights Off\") end;\n          turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n        else\n          if StartSource['type'] == 'property' then\n            if deBug then logbug(\"cyan\", \"Trigger by \"..fibaro:getRoomNameByDeviceID(StartSource['deviceID'])..\n                                 \" \"..fibaro:getName(StartSource['deviceID'])..\n                                 \". Current lux:\"..luxMeas..\", luxMin: \"..luxMin..\", luxMax: \"..luxMax..\n                                 \" light state not changed\") end;\n          else\n            if deBug then logbug(\"cyan\", \"Trigger by global \"..StartSource['name']..\n                                 \". Current lux:\"..luxMeas..\", luxMin: \"..luxMin..\", luxMax: \"..luxMax..\n                                 \" light state not changed\") end;\n          end\n        end\n      else\n        if deBug then logbug(\"orange\", \"Lights are in manual mode. No action taken.\") end;\n      end\n      endScene();\n    end\n    else\n      if deBug then logbug(\"cyan\", \"Trigger by \"..fibaro:getRoomNameByDeviceID(StartSource['deviceID'])..\n                           \" \"..fibaro:getName(StartSource['deviceID'])..\" present state is \"..\n                           fibaro:getGlobalValue(presentState)..\" keep lights turned off\") end;\n      endScene();\n    end\n  else\n    if (fibaro:getGlobalValue(lightState) == lightStateMapping.Auto) then\n      if StartSource['type'] == \"property\" then\n        luxMeas = checkLux();\n        if (luxMeas >= luxMax) then\n          if deBug then logbug(\"cyan\", \"Trigger by \"..fibaro:getRoomNameByDeviceID(StartSource['deviceID'])..\n                               \" \"..fibaro:getName(StartSource['deviceID'])..\n                               \". Current lux: \"..luxMeas..\" >= luxMax: \"..luxMax..\" turn lights Off\") end;\n          turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n        else\n          if deBug then logbug(\"cyan\", \"Trigger by \"..fibaro:getRoomNameByDeviceID(StartSource['deviceID'])..\n                               \" \"..fibaro:getName(StartSource['deviceID'])..\n                               \". Current lux: \"..luxMeas..\", luxMin: \"..luxMin..\", luxMax: \"..luxMax..\n                               \" light state not changed\") end;\n        end\n      else\n        if ((StartSource['name'] == timeOfDay) or (StartSource['name'] == sleepState)) then\n          if (StartSource['name'] == timeOfDay) then\n            if deBug then logbug(\"cyan\", \"Trigger by global: \".. StartSource['name']..\", set to \"..\n                                 fibaro:getGlobalValue(timeOfDay)..\", check dim low status\") end;\n          else\n            if deBug then logbug(\"cyan\", \"Trigger by global: \".. StartSource['name']..\", set to \"..\n                                 fibaro:getGlobalValue(sleepState)..\", check dim low status\") end;\n          end\n          dimOffLights();\n        else\n          if (StartSource['name'] == sleepingName) then\n            if sleepingName ~= \"\" then\n              if fibaro:getGlobalValue(sleepingName) == sleepingMapping.Yes then\n                if deBug then logbug(\"cyan\", \"Trigger by global: \".. StartSource['name']..\", set to \"..sleepingMapping.Yes..\n                                     \", turn lights off\") end;\n                turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n              else\n                if deBug then logbug(\"cyan\", \"Trigger by global: \".. StartSource['name']..\", set to \"..sleepingMapping.No..\n                                     \", check dim low status\") end;\n                dimOffLights();\n              end\n            end\n          elseif (StartSource['name'] == presentState) then\n            if fibaro:getGlobalValue(presentState) == presentStateMapping.Away then\n              if deBug then logbug(\"cyan\", \"Trigger by global: \".. StartSource['name']..\", set to \"..\n                                   fibaro:getGlobalValue(presentState)..\", turn lights off\") end;\n              turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n            else\n              if deBug then logbug(\"cyan\", \"Trigger by global: \".. StartSource['name']..\", set to \"..\n                                   fibaro:getGlobalValue(presentState)..\", check dim low status\") end;\n              dimOffLights();\n            end\n          end\n        end\n      end\n    else\n      if deBug then logbug(\"orange\", \"Lights are in manual mode. No action taken.\") end;\n    end\n    endScene();\n  end\nelse\n  -- when manually activated then turn off lights\n  if deBug then logbug(\"cyan\", \"Scene triggered manually, turn lights off\") end;\n  turnOffLights(VDoff, DIMoff, RGBWoff, SWToff);\n  endScene();\nend\n-- END OF CODE ------------------------------------------------------------\n"}